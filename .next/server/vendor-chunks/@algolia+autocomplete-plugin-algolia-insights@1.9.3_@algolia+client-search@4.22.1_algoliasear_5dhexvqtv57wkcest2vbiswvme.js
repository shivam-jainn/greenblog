"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme";
exports.ids = ["vendor-chunks/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createAlgoliaInsightsPlugin.js":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createAlgoliaInsightsPlugin.js ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAlgoliaInsightsPlugin: () => (/* binding */ createAlgoliaInsightsPlugin)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/debounce.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/safelyRunOnBrowser.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/createRef.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/isEqual.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/noop.js\");\n/* harmony import */ var _createClickedEvent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./createClickedEvent */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createClickedEvent.js\");\n/* harmony import */ var _createSearchInsightsApi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./createSearchInsightsApi */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createSearchInsightsApi.js\");\n/* harmony import */ var _createViewedEvents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createViewedEvents */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createViewedEvents.js\");\n/* harmony import */ var _isAlgoliaInsightsHit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isAlgoliaInsightsHit */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isAlgoliaInsightsHit.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\n\n\nvar VIEW_EVENT_DELAY = 400;\nvar ALGOLIA_INSIGHTS_VERSION = \"2.6.0\";\nvar ALGOLIA_INSIGHTS_SRC = \"https://cdn.jsdelivr.net/npm/search-insights@\".concat(ALGOLIA_INSIGHTS_VERSION, \"/dist/search-insights.min.js\");\nvar sendViewedObjectIDs = (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.debounce)(function(_ref) {\n    var onItemsChange = _ref.onItemsChange, items = _ref.items, insights = _ref.insights, state = _ref.state;\n    onItemsChange({\n        insights: insights,\n        insightsEvents: (0,_createViewedEvents__WEBPACK_IMPORTED_MODULE_1__.createViewedEvents)({\n            items: items\n        }).map(function(event) {\n            return _objectSpread({\n                eventName: \"Items Viewed\"\n            }, event);\n        }),\n        state: state\n    });\n}, VIEW_EVENT_DELAY);\nfunction createAlgoliaInsightsPlugin(options) {\n    var _getOptions = getOptions(options), providedInsightsClient = _getOptions.insightsClient, onItemsChange = _getOptions.onItemsChange, onSelectEvent = _getOptions.onSelect, onActiveEvent = _getOptions.onActive;\n    var insightsClient = providedInsightsClient;\n    if (!providedInsightsClient) {\n        (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__.safelyRunOnBrowser)(function(_ref2) {\n            var window = _ref2.window;\n            var pointer = window.AlgoliaAnalyticsObject || \"aa\";\n            if (typeof pointer === \"string\") {\n                insightsClient = window[pointer];\n            }\n            if (!insightsClient) {\n                window.AlgoliaAnalyticsObject = pointer;\n                if (!window[pointer]) {\n                    window[pointer] = function() {\n                        if (!window[pointer].queue) {\n                            window[pointer].queue = [];\n                        }\n                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                            args[_key] = arguments[_key];\n                        }\n                        window[pointer].queue.push(args);\n                    };\n                }\n                window[pointer].version = ALGOLIA_INSIGHTS_VERSION;\n                insightsClient = window[pointer];\n                loadInsights(window);\n            }\n        });\n    }\n    var insights = (0,_createSearchInsightsApi__WEBPACK_IMPORTED_MODULE_3__.createSearchInsightsApi)(insightsClient);\n    var previousItems = (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_4__.createRef)([]);\n    var debouncedOnStateChange = (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.debounce)(function(_ref3) {\n        var state = _ref3.state;\n        if (!state.isOpen) {\n            return;\n        }\n        var items = state.collections.reduce(function(acc, current) {\n            return [].concat(_toConsumableArray(acc), _toConsumableArray(current.items));\n        }, []).filter(_isAlgoliaInsightsHit__WEBPACK_IMPORTED_MODULE_5__.isAlgoliaInsightsHit);\n        if (!(0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_6__.isEqual)(previousItems.current.map(function(x) {\n            return x.objectID;\n        }), items.map(function(x) {\n            return x.objectID;\n        }))) {\n            previousItems.current = items;\n            if (items.length > 0) {\n                sendViewedObjectIDs({\n                    onItemsChange: onItemsChange,\n                    items: items,\n                    insights: insights,\n                    state: state\n                });\n            }\n        }\n    }, 0);\n    return {\n        name: \"aa.algoliaInsightsPlugin\",\n        subscribe: function subscribe(_ref4) {\n            var setContext = _ref4.setContext, onSelect = _ref4.onSelect, onActive = _ref4.onActive;\n            insightsClient(\"addAlgoliaAgent\", \"insights-plugin\");\n            setContext({\n                algoliaInsightsPlugin: {\n                    __algoliaSearchParameters: {\n                        clickAnalytics: true\n                    },\n                    insights: insights\n                }\n            });\n            onSelect(function(_ref5) {\n                var item = _ref5.item, state = _ref5.state, event = _ref5.event;\n                if (!(0,_isAlgoliaInsightsHit__WEBPACK_IMPORTED_MODULE_5__.isAlgoliaInsightsHit)(item)) {\n                    return;\n                }\n                onSelectEvent({\n                    state: state,\n                    event: event,\n                    insights: insights,\n                    item: item,\n                    insightsEvents: [\n                        _objectSpread({\n                            eventName: \"Item Selected\"\n                        }, (0,_createClickedEvent__WEBPACK_IMPORTED_MODULE_7__.createClickedEvent)({\n                            item: item,\n                            items: previousItems.current\n                        }))\n                    ]\n                });\n            });\n            onActive(function(_ref6) {\n                var item = _ref6.item, state = _ref6.state, event = _ref6.event;\n                if (!(0,_isAlgoliaInsightsHit__WEBPACK_IMPORTED_MODULE_5__.isAlgoliaInsightsHit)(item)) {\n                    return;\n                }\n                onActiveEvent({\n                    state: state,\n                    event: event,\n                    insights: insights,\n                    item: item,\n                    insightsEvents: [\n                        _objectSpread({\n                            eventName: \"Item Active\"\n                        }, (0,_createClickedEvent__WEBPACK_IMPORTED_MODULE_7__.createClickedEvent)({\n                            item: item,\n                            items: previousItems.current\n                        }))\n                    ]\n                });\n            });\n        },\n        onStateChange: function onStateChange(_ref7) {\n            var state = _ref7.state;\n            debouncedOnStateChange({\n                state: state\n            });\n        },\n        __autocomplete_pluginOptions: options\n    };\n}\nfunction getOptions(options) {\n    return _objectSpread({\n        onItemsChange: function onItemsChange(_ref8) {\n            var insights = _ref8.insights, insightsEvents = _ref8.insightsEvents;\n            insights.viewedObjectIDs.apply(insights, _toConsumableArray(insightsEvents.map(function(event) {\n                return _objectSpread(_objectSpread({}, event), {}, {\n                    algoliaSource: [].concat(_toConsumableArray(event.algoliaSource || []), [\n                        \"autocomplete-internal\"\n                    ])\n                });\n            })));\n        },\n        onSelect: function onSelect(_ref9) {\n            var insights = _ref9.insights, insightsEvents = _ref9.insightsEvents;\n            insights.clickedObjectIDsAfterSearch.apply(insights, _toConsumableArray(insightsEvents.map(function(event) {\n                return _objectSpread(_objectSpread({}, event), {}, {\n                    algoliaSource: [].concat(_toConsumableArray(event.algoliaSource || []), [\n                        \"autocomplete-internal\"\n                    ])\n                });\n            })));\n        },\n        onActive: _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_8__.noop\n    }, options);\n}\nfunction loadInsights(environment) {\n    var errorMessage = \"[Autocomplete]: Could not load search-insights.js. Please load it manually following https://alg.li/insights-autocomplete\";\n    try {\n        var script = environment.document.createElement(\"script\");\n        script.async = true;\n        script.src = ALGOLIA_INSIGHTS_SRC;\n        script.onerror = function() {\n            // eslint-disable-next-line no-console\n            console.error(errorMessage);\n        };\n        document.body.appendChild(script);\n    } catch (cause) {\n        // eslint-disable-next-line no-console\n        console.error(errorMessage);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createAlgoliaInsightsPlugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createClickedEvent.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createClickedEvent.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClickedEvent: () => (/* binding */ createClickedEvent)\n/* harmony export */ });\nfunction createClickedEvent(_ref) {\n    var item = _ref.item, items = _ref.items;\n    return {\n        index: item.__autocomplete_indexName,\n        items: [\n            item\n        ],\n        positions: [\n            1 + items.findIndex(function(x) {\n                return x.objectID === item.objectID;\n            })\n        ],\n        queryID: item.__autocomplete_queryID,\n        algoliaSource: [\n            \"autocomplete\"\n        ]\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLXBsdWdpbi1hbGdvbGlhLWluc2lnaHRzQDEuOS4zX0BhbGdvbGlhK2NsaWVudC1zZWFyY2hANC4yMi4xX2FsZ29saWFzZWFyXzVkaGV4dnF0djU3d2tjZXN0MnZiaXN3dm1lL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHMvZGlzdC9lc20vY3JlYXRlQ2xpY2tlZEV2ZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxtQkFBbUJDLElBQUk7SUFDckMsSUFBSUMsT0FBT0QsS0FBS0MsSUFBSSxFQUNsQkMsUUFBUUYsS0FBS0UsS0FBSztJQUNwQixPQUFPO1FBQ0xDLE9BQU9GLEtBQUtHLHdCQUF3QjtRQUNwQ0YsT0FBTztZQUFDRDtTQUFLO1FBQ2JJLFdBQVc7WUFBQyxJQUFJSCxNQUFNSSxTQUFTLENBQUMsU0FBVUMsQ0FBQztnQkFDekMsT0FBT0EsRUFBRUMsUUFBUSxLQUFLUCxLQUFLTyxRQUFRO1lBQ3JDO1NBQUc7UUFDSEMsU0FBU1IsS0FBS1Msc0JBQXNCO1FBQ3BDQyxlQUFlO1lBQUM7U0FBZTtJQUNqQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHNAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJfNWRoZXh2cXR2NTd3a2Nlc3QydmJpc3d2bWUvbm9kZV9tb2R1bGVzL0BhbGdvbGlhL2F1dG9jb21wbGV0ZS1wbHVnaW4tYWxnb2xpYS1pbnNpZ2h0cy9kaXN0L2VzbS9jcmVhdGVDbGlja2VkRXZlbnQuanM/ZWVkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2xpY2tlZEV2ZW50KF9yZWYpIHtcbiAgdmFyIGl0ZW0gPSBfcmVmLml0ZW0sXG4gICAgaXRlbXMgPSBfcmVmLml0ZW1zO1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBpdGVtLl9fYXV0b2NvbXBsZXRlX2luZGV4TmFtZSxcbiAgICBpdGVtczogW2l0ZW1dLFxuICAgIHBvc2l0aW9uczogWzEgKyBpdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4Lm9iamVjdElEID09PSBpdGVtLm9iamVjdElEO1xuICAgIH0pXSxcbiAgICBxdWVyeUlEOiBpdGVtLl9fYXV0b2NvbXBsZXRlX3F1ZXJ5SUQsXG4gICAgYWxnb2xpYVNvdXJjZTogWydhdXRvY29tcGxldGUnXVxuICB9O1xufSJdLCJuYW1lcyI6WyJjcmVhdGVDbGlja2VkRXZlbnQiLCJfcmVmIiwiaXRlbSIsIml0ZW1zIiwiaW5kZXgiLCJfX2F1dG9jb21wbGV0ZV9pbmRleE5hbWUiLCJwb3NpdGlvbnMiLCJmaW5kSW5kZXgiLCJ4Iiwib2JqZWN0SUQiLCJxdWVyeUlEIiwiX19hdXRvY29tcGxldGVfcXVlcnlJRCIsImFsZ29saWFTb3VyY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createClickedEvent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createSearchInsightsApi.js":
/*!****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createSearchInsightsApi.js ***!
  \****************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSearchInsightsApi: () => (/* binding */ createSearchInsightsApi)\n/* harmony export */ });\n/* harmony import */ var _isModernInsightsClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isModernInsightsClient */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isModernInsightsClient.js\");\nvar _excluded = [\n    \"items\"\n], _excluded2 = [\n    \"items\"\n];\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction chunk(item) {\n    var chunkSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    var chunks = [];\n    for(var i = 0; i < item.objectIDs.length; i += chunkSize){\n        chunks.push(_objectSpread(_objectSpread({}, item), {}, {\n            objectIDs: item.objectIDs.slice(i, i + chunkSize)\n        }));\n    }\n    return chunks;\n}\nfunction mapToInsightsParamsApi(params) {\n    return params.map(function(_ref) {\n        var items = _ref.items, param = _objectWithoutProperties(_ref, _excluded);\n        return _objectSpread(_objectSpread({}, param), {}, {\n            objectIDs: (items === null || items === void 0 ? void 0 : items.map(function(_ref2) {\n                var objectID = _ref2.objectID;\n                return objectID;\n            })) || param.objectIDs\n        });\n    });\n}\nfunction createSearchInsightsApi(searchInsights) {\n    var canSendHeaders = (0,_isModernInsightsClient__WEBPACK_IMPORTED_MODULE_0__.isModernInsightsClient)(searchInsights);\n    function sendToInsights(method, payloads, items) {\n        if (canSendHeaders && typeof items !== \"undefined\") {\n            var _items$0$__autocomple = items[0].__autocomplete_algoliaCredentials, appId = _items$0$__autocomple.appId, apiKey = _items$0$__autocomple.apiKey;\n            var headers = {\n                \"X-Algolia-Application-Id\": appId,\n                \"X-Algolia-API-Key\": apiKey\n            };\n            searchInsights.apply(void 0, [\n                method\n            ].concat(_toConsumableArray(payloads), [\n                {\n                    headers: headers\n                }\n            ]));\n        } else {\n            searchInsights.apply(void 0, [\n                method\n            ].concat(_toConsumableArray(payloads)));\n        }\n    }\n    return {\n        /**\n     * Initializes Insights with Algolia credentials.\n     */ init: function init(appId, apiKey) {\n            searchInsights(\"init\", {\n                appId: appId,\n                apiKey: apiKey\n            });\n        },\n        /**\n     * Sets the user token to attach to events.\n     */ setUserToken: function setUserToken(userToken) {\n            searchInsights(\"setUserToken\", userToken);\n        },\n        /**\n     * Sends click events to capture a query and its clicked items and positions.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-object-ids-after-search/\n     */ clickedObjectIDsAfterSearch: function clickedObjectIDsAfterSearch() {\n            for(var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++){\n                params[_key] = arguments[_key];\n            }\n            if (params.length > 0) {\n                sendToInsights(\"clickedObjectIDsAfterSearch\", mapToInsightsParamsApi(params), params[0].items);\n            }\n        },\n        /**\n     * Sends click events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-object-ids/\n     */ clickedObjectIDs: function clickedObjectIDs() {\n            for(var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++){\n                params[_key2] = arguments[_key2];\n            }\n            if (params.length > 0) {\n                sendToInsights(\"clickedObjectIDs\", mapToInsightsParamsApi(params), params[0].items);\n            }\n        },\n        /**\n     * Sends click events to capture the filters a user clicks on.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/clicked-filters/\n     */ clickedFilters: function clickedFilters() {\n            for(var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++){\n                params[_key3] = arguments[_key3];\n            }\n            if (params.length > 0) {\n                searchInsights.apply(void 0, [\n                    \"clickedFilters\"\n                ].concat(params));\n            }\n        },\n        /**\n     * Sends conversion events to capture a query and its clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-object-ids-after-search/\n     */ convertedObjectIDsAfterSearch: function convertedObjectIDsAfterSearch() {\n            for(var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++){\n                params[_key4] = arguments[_key4];\n            }\n            if (params.length > 0) {\n                sendToInsights(\"convertedObjectIDsAfterSearch\", mapToInsightsParamsApi(params), params[0].items);\n            }\n        },\n        /**\n     * Sends conversion events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-object-ids/\n     */ convertedObjectIDs: function convertedObjectIDs() {\n            for(var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++){\n                params[_key5] = arguments[_key5];\n            }\n            if (params.length > 0) {\n                sendToInsights(\"convertedObjectIDs\", mapToInsightsParamsApi(params), params[0].items);\n            }\n        },\n        /**\n     * Sends conversion events to capture the filters a user uses when converting.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/converted-filters/\n     */ convertedFilters: function convertedFilters() {\n            for(var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++){\n                params[_key6] = arguments[_key6];\n            }\n            if (params.length > 0) {\n                searchInsights.apply(void 0, [\n                    \"convertedFilters\"\n                ].concat(params));\n            }\n        },\n        /**\n     * Sends view events to capture clicked items.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/viewed-object-ids/\n     */ viewedObjectIDs: function viewedObjectIDs() {\n            for(var _len7 = arguments.length, params = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++){\n                params[_key7] = arguments[_key7];\n            }\n            if (params.length > 0) {\n                params.reduce(function(acc, _ref3) {\n                    var items = _ref3.items, param = _objectWithoutProperties(_ref3, _excluded2);\n                    return [].concat(_toConsumableArray(acc), _toConsumableArray(chunk(_objectSpread(_objectSpread({}, param), {}, {\n                        objectIDs: (items === null || items === void 0 ? void 0 : items.map(function(_ref4) {\n                            var objectID = _ref4.objectID;\n                            return objectID;\n                        })) || param.objectIDs\n                    })).map(function(payload) {\n                        return {\n                            items: items,\n                            payload: payload\n                        };\n                    })));\n                }, []).forEach(function(_ref5) {\n                    var items = _ref5.items, payload = _ref5.payload;\n                    return sendToInsights(\"viewedObjectIDs\", [\n                        payload\n                    ], items);\n                });\n            }\n        },\n        /**\n     * Sends view events to capture the filters a user uses when viewing.\n     *\n     * @link https://www.algolia.com/doc/api-reference/api-methods/viewed-filters/\n     */ viewedFilters: function viewedFilters() {\n            for(var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++){\n                params[_key8] = arguments[_key8];\n            }\n            if (params.length > 0) {\n                searchInsights.apply(void 0, [\n                    \"viewedFilters\"\n                ].concat(params));\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createSearchInsightsApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createViewedEvents.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createViewedEvents.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createViewedEvents: () => (/* binding */ createViewedEvents)\n/* harmony export */ });\nfunction createViewedEvents(_ref) {\n    var items = _ref.items;\n    var itemsByIndexName = items.reduce(function(acc, current) {\n        var _acc$current$__autoco;\n        acc[current.__autocomplete_indexName] = ((_acc$current$__autoco = acc[current.__autocomplete_indexName]) !== null && _acc$current$__autoco !== void 0 ? _acc$current$__autoco : []).concat(current);\n        return acc;\n    }, {});\n    return Object.keys(itemsByIndexName).map(function(indexName) {\n        var items = itemsByIndexName[indexName];\n        return {\n            index: indexName,\n            items: items,\n            algoliaSource: [\n                \"autocomplete\"\n            ]\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLXBsdWdpbi1hbGdvbGlhLWluc2lnaHRzQDEuOS4zX0BhbGdvbGlhK2NsaWVudC1zZWFyY2hANC4yMi4xX2FsZ29saWFzZWFyXzVkaGV4dnF0djU3d2tjZXN0MnZiaXN3dm1lL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHMvZGlzdC9lc20vY3JlYXRlVmlld2VkRXZlbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxtQkFBbUJDLElBQUk7SUFDckMsSUFBSUMsUUFBUUQsS0FBS0MsS0FBSztJQUN0QixJQUFJQyxtQkFBbUJELE1BQU1FLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVDLE9BQU87UUFDeEQsSUFBSUM7UUFDSkYsR0FBRyxDQUFDQyxRQUFRRSx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQ0Qsd0JBQXdCRixHQUFHLENBQUNDLFFBQVFFLHdCQUF3QixDQUFDLE1BQU0sUUFBUUQsMEJBQTBCLEtBQUssSUFBSUEsd0JBQXdCLEVBQUUsRUFBRUUsTUFBTSxDQUFDSDtRQUMzTCxPQUFPRDtJQUNULEdBQUcsQ0FBQztJQUNKLE9BQU9LLE9BQU9DLElBQUksQ0FBQ1Isa0JBQWtCUyxHQUFHLENBQUMsU0FBVUMsU0FBUztRQUMxRCxJQUFJWCxRQUFRQyxnQkFBZ0IsQ0FBQ1UsVUFBVTtRQUN2QyxPQUFPO1lBQ0xDLE9BQU9EO1lBQ1BYLE9BQU9BO1lBQ1BhLGVBQWU7Z0JBQUM7YUFBZTtRQUNqQztJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWlsd2luZC1uZXh0anMtc3RhcnRlci1ibG9nLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbGdvbGlhK2F1dG9jb21wbGV0ZS1wbHVnaW4tYWxnb2xpYS1pbnNpZ2h0c0AxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2Vhcl81ZGhleHZxdHY1N3drY2VzdDJ2Ymlzd3ZtZS9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLXBsdWdpbi1hbGdvbGlhLWluc2lnaHRzL2Rpc3QvZXNtL2NyZWF0ZVZpZXdlZEV2ZW50cy5qcz9lYWU2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVWaWV3ZWRFdmVudHMoX3JlZikge1xuICB2YXIgaXRlbXMgPSBfcmVmLml0ZW1zO1xuICB2YXIgaXRlbXNCeUluZGV4TmFtZSA9IGl0ZW1zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyZW50KSB7XG4gICAgdmFyIF9hY2MkY3VycmVudCRfX2F1dG9jbztcbiAgICBhY2NbY3VycmVudC5fX2F1dG9jb21wbGV0ZV9pbmRleE5hbWVdID0gKChfYWNjJGN1cnJlbnQkX19hdXRvY28gPSBhY2NbY3VycmVudC5fX2F1dG9jb21wbGV0ZV9pbmRleE5hbWVdKSAhPT0gbnVsbCAmJiBfYWNjJGN1cnJlbnQkX19hdXRvY28gIT09IHZvaWQgMCA/IF9hY2MkY3VycmVudCRfX2F1dG9jbyA6IFtdKS5jb25jYXQoY3VycmVudCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMoaXRlbXNCeUluZGV4TmFtZSkubWFwKGZ1bmN0aW9uIChpbmRleE5hbWUpIHtcbiAgICB2YXIgaXRlbXMgPSBpdGVtc0J5SW5kZXhOYW1lW2luZGV4TmFtZV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiBpbmRleE5hbWUsXG4gICAgICBpdGVtczogaXRlbXMsXG4gICAgICBhbGdvbGlhU291cmNlOiBbJ2F1dG9jb21wbGV0ZSddXG4gICAgfTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbImNyZWF0ZVZpZXdlZEV2ZW50cyIsIl9yZWYiLCJpdGVtcyIsIml0ZW1zQnlJbmRleE5hbWUiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyZW50IiwiX2FjYyRjdXJyZW50JF9fYXV0b2NvIiwiX19hdXRvY29tcGxldGVfaW5kZXhOYW1lIiwiY29uY2F0IiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImluZGV4TmFtZSIsImluZGV4IiwiYWxnb2xpYVNvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createViewedEvents.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isAlgoliaInsightsHit.js":
/*!*************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isAlgoliaInsightsHit.js ***!
  \*************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isAlgoliaInsightsHit: () => (/* binding */ isAlgoliaInsightsHit)\n/* harmony export */ });\nfunction isAlgoliaInsightsHit(hit) {\n    return hit.objectID && hit.__autocomplete_indexName && hit.__autocomplete_queryID;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLXBsdWdpbi1hbGdvbGlhLWluc2lnaHRzQDEuOS4zX0BhbGdvbGlhK2NsaWVudC1zZWFyY2hANC4yMi4xX2FsZ29saWFzZWFyXzVkaGV4dnF0djU3d2tjZXN0MnZiaXN3dm1lL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHMvZGlzdC9lc20vaXNBbGdvbGlhSW5zaWdodHNIaXQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLHFCQUFxQkMsR0FBRztJQUN0QyxPQUFPQSxJQUFJQyxRQUFRLElBQUlELElBQUlFLHdCQUF3QixJQUFJRixJQUFJRyxzQkFBc0I7QUFDbkYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWlsd2luZC1uZXh0anMtc3RhcnRlci1ibG9nLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbGdvbGlhK2F1dG9jb21wbGV0ZS1wbHVnaW4tYWxnb2xpYS1pbnNpZ2h0c0AxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2Vhcl81ZGhleHZxdHY1N3drY2VzdDJ2Ymlzd3ZtZS9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLXBsdWdpbi1hbGdvbGlhLWluc2lnaHRzL2Rpc3QvZXNtL2lzQWxnb2xpYUluc2lnaHRzSGl0LmpzPzVmNjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzQWxnb2xpYUluc2lnaHRzSGl0KGhpdCkge1xuICByZXR1cm4gaGl0Lm9iamVjdElEICYmIGhpdC5fX2F1dG9jb21wbGV0ZV9pbmRleE5hbWUgJiYgaGl0Ll9fYXV0b2NvbXBsZXRlX3F1ZXJ5SUQ7XG59Il0sIm5hbWVzIjpbImlzQWxnb2xpYUluc2lnaHRzSGl0IiwiaGl0Iiwib2JqZWN0SUQiLCJfX2F1dG9jb21wbGV0ZV9pbmRleE5hbWUiLCJfX2F1dG9jb21wbGV0ZV9xdWVyeUlEIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isAlgoliaInsightsHit.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isModernInsightsClient.js":
/*!***************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isModernInsightsClient.js ***!
  \***************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isModernInsightsClient: () => (/* binding */ isModernInsightsClient)\n/* harmony export */ });\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n/**\n * Determines if a given insights `client` supports the optional call to `init`\n * and the ability to set credentials via extra parameters when sending events.\n */ function isModernInsightsClient(client) {\n    var _split$map = (client.version || \"\").split(\".\").map(Number), _split$map2 = _slicedToArray(_split$map, 2), major = _split$map2[0], minor = _split$map2[1];\n    /* eslint-disable @typescript-eslint/camelcase */ var v3 = major >= 3;\n    var v2_4 = major === 2 && minor >= 4;\n    var v1_10 = major === 1 && minor >= 10;\n    return v3 || v2_4 || v1_10;\n/* eslint-enable @typescript-eslint/camelcase */ }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLXBsdWdpbi1hbGdvbGlhLWluc2lnaHRzQDEuOS4zX0BhbGdvbGlhK2NsaWVudC1zZWFyY2hANC4yMi4xX2FsZ29saWFzZWFyXzVkaGV4dnF0djU3d2tjZXN0MnZiaXN3dm1lL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHMvZGlzdC9lc20vaXNNb2Rlcm5JbnNpZ2h0c0NsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsU0FBU0EsZUFBZUMsR0FBRyxFQUFFQyxDQUFDO0lBQUksT0FBT0MsZ0JBQWdCRixRQUFRRyxzQkFBc0JILEtBQUtDLE1BQU1HLDRCQUE0QkosS0FBS0MsTUFBTUk7QUFBb0I7QUFDN0osU0FBU0E7SUFBcUIsTUFBTSxJQUFJQyxVQUFVO0FBQThJO0FBQ2hNLFNBQVNGLDRCQUE0QkcsQ0FBQyxFQUFFQyxNQUFNO0lBQUksSUFBSSxDQUFDRCxHQUFHO0lBQVEsSUFBSSxPQUFPQSxNQUFNLFVBQVUsT0FBT0Usa0JBQWtCRixHQUFHQztJQUFTLElBQUlFLElBQUlDLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNQLEdBQUdRLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFBSSxJQUFJTCxNQUFNLFlBQVlILEVBQUVTLFdBQVcsRUFBRU4sSUFBSUgsRUFBRVMsV0FBVyxDQUFDQyxJQUFJO0lBQUUsSUFBSVAsTUFBTSxTQUFTQSxNQUFNLE9BQU8sT0FBT1EsTUFBTUMsSUFBSSxDQUFDWjtJQUFJLElBQUlHLE1BQU0sZUFBZSwyQ0FBMkNVLElBQUksQ0FBQ1YsSUFBSSxPQUFPRCxrQkFBa0JGLEdBQUdDO0FBQVM7QUFDL1osU0FBU0Msa0JBQWtCVCxHQUFHLEVBQUVxQixHQUFHO0lBQUksSUFBSUEsT0FBTyxRQUFRQSxNQUFNckIsSUFBSXNCLE1BQU0sRUFBRUQsTUFBTXJCLElBQUlzQixNQUFNO0lBQUUsSUFBSyxJQUFJckIsSUFBSSxHQUFHc0IsT0FBTyxJQUFJTCxNQUFNRyxNQUFNcEIsSUFBSW9CLEtBQUtwQixJQUFLc0IsSUFBSSxDQUFDdEIsRUFBRSxHQUFHRCxHQUFHLENBQUNDLEVBQUU7SUFBRSxPQUFPc0I7QUFBTTtBQUNsTCxTQUFTcEIsc0JBQXNCSCxHQUFHLEVBQUVDLENBQUM7SUFBSSxJQUFJdUIsS0FBSyxRQUFReEIsTUFBTSxPQUFPLGVBQWUsT0FBT3lCLFVBQVV6QixHQUFHLENBQUN5QixPQUFPQyxRQUFRLENBQUMsSUFBSTFCLEdBQUcsQ0FBQyxhQUFhO0lBQUUsSUFBSSxRQUFRd0IsSUFBSTtRQUFFLElBQUlHLElBQUlDLElBQUlDLElBQUlDLElBQUlDLE9BQU8sRUFBRSxFQUFFQyxLQUFLLENBQUMsR0FBR0MsS0FBSyxDQUFDO1FBQUcsSUFBSTtZQUFFLElBQUlKLEtBQUssQ0FBQ0wsS0FBS0EsR0FBR1YsSUFBSSxDQUFDZCxJQUFHLEVBQUdrQyxJQUFJLEVBQUUsTUFBTWpDLEdBQUc7Z0JBQUUsSUFBSVUsT0FBT2EsUUFBUUEsSUFBSTtnQkFBUVEsS0FBSyxDQUFDO1lBQUcsT0FBTyxNQUFPLENBQUVBLENBQUFBLEtBQUssQ0FBQ0wsS0FBS0UsR0FBR2YsSUFBSSxDQUFDVSxHQUFFLEVBQUdXLElBQUksS0FBTUosQ0FBQUEsS0FBS0ssSUFBSSxDQUFDVCxHQUFHVSxLQUFLLEdBQUdOLEtBQUtULE1BQU0sS0FBS3JCLENBQUFBLEdBQUkrQixLQUFLLENBQUM7UUFBSSxFQUFFLE9BQU9NLEtBQUs7WUFBRUwsS0FBSyxDQUFDLEdBQUdMLEtBQUtVO1FBQUssU0FBVTtZQUFFLElBQUk7Z0JBQUUsSUFBSSxDQUFDTixNQUFNLFFBQVFSLEdBQUdlLE1BQU0sSUFBS1QsQ0FBQUEsS0FBS04sR0FBR2UsTUFBTSxJQUFJNUIsT0FBT21CLFFBQVFBLEVBQUMsR0FBSTtZQUFRLFNBQVU7Z0JBQUUsSUFBSUcsSUFBSSxNQUFNTDtZQUFJO1FBQUU7UUFBRSxPQUFPRztJQUFNO0FBQUU7QUFDM2tCLFNBQVM3QixnQkFBZ0JGLEdBQUc7SUFBSSxJQUFJa0IsTUFBTXNCLE9BQU8sQ0FBQ3hDLE1BQU0sT0FBT0E7QUFBSztBQUNwRTs7O0NBR0MsR0FDTSxTQUFTeUMsdUJBQXVCQyxNQUFNO0lBQzNDLElBQUlDLGFBQWEsQ0FBQ0QsT0FBT0UsT0FBTyxJQUFJLEVBQUMsRUFBR0MsS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQ0MsU0FDckRDLGNBQWNqRCxlQUFlNEMsWUFBWSxJQUN6Q00sUUFBUUQsV0FBVyxDQUFDLEVBQUUsRUFDdEJFLFFBQVFGLFdBQVcsQ0FBQyxFQUFFO0lBRXhCLCtDQUErQyxHQUMvQyxJQUFJRyxLQUFLRixTQUFTO0lBQ2xCLElBQUlHLE9BQU9ILFVBQVUsS0FBS0MsU0FBUztJQUNuQyxJQUFJRyxRQUFRSixVQUFVLEtBQUtDLFNBQVM7SUFDcEMsT0FBT0MsTUFBTUMsUUFBUUM7QUFDckIsOENBQThDLEdBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHNAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJfNWRoZXh2cXR2NTd3a2Nlc3QydmJpc3d2bWUvbm9kZV9tb2R1bGVzL0BhbGdvbGlhL2F1dG9jb21wbGV0ZS1wbHVnaW4tYWxnb2xpYS1pbnNpZ2h0cy9kaXN0L2VzbS9pc01vZGVybkluc2lnaHRzQ2xpZW50LmpzPzcyNDEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsgcmV0dXJuIGFycjI7IH1cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gbnVsbCA9PSBhcnIgPyBudWxsIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgU3ltYm9sICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChudWxsICE9IF9pKSB7IHZhciBfcywgX2UsIF94LCBfciwgX2FyciA9IFtdLCBfbiA9ICEwLCBfZCA9ICExOyB0cnkgeyBpZiAoX3ggPSAoX2kgPSBfaS5jYWxsKGFycikpLm5leHQsIDAgPT09IGkpIHsgaWYgKE9iamVjdChfaSkgIT09IF9pKSByZXR1cm47IF9uID0gITE7IH0gZWxzZSBmb3IgKDsgIShfbiA9IChfcyA9IF94LmNhbGwoX2kpKS5kb25lKSAmJiAoX2Fyci5wdXNoKF9zLnZhbHVlKSwgX2Fyci5sZW5ndGggIT09IGkpOyBfbiA9ICEwKTsgfSBjYXRjaCAoZXJyKSB7IF9kID0gITAsIF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIG51bGwgIT0gX2kucmV0dXJuICYmIChfciA9IF9pLnJldHVybigpLCBPYmplY3QoX3IpICE9PSBfcikpIHJldHVybjsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IH1cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gaW5zaWdodHMgYGNsaWVudGAgc3VwcG9ydHMgdGhlIG9wdGlvbmFsIGNhbGwgdG8gYGluaXRgXG4gKiBhbmQgdGhlIGFiaWxpdHkgdG8gc2V0IGNyZWRlbnRpYWxzIHZpYSBleHRyYSBwYXJhbWV0ZXJzIHdoZW4gc2VuZGluZyBldmVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc01vZGVybkluc2lnaHRzQ2xpZW50KGNsaWVudCkge1xuICB2YXIgX3NwbGl0JG1hcCA9IChjbGllbnQudmVyc2lvbiB8fCAnJykuc3BsaXQoJy4nKS5tYXAoTnVtYmVyKSxcbiAgICBfc3BsaXQkbWFwMiA9IF9zbGljZWRUb0FycmF5KF9zcGxpdCRtYXAsIDIpLFxuICAgIG1ham9yID0gX3NwbGl0JG1hcDJbMF0sXG4gICAgbWlub3IgPSBfc3BsaXQkbWFwMlsxXTtcblxuICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvY2FtZWxjYXNlICovXG4gIHZhciB2MyA9IG1ham9yID49IDM7XG4gIHZhciB2Ml80ID0gbWFqb3IgPT09IDIgJiYgbWlub3IgPj0gNDtcbiAgdmFyIHYxXzEwID0gbWFqb3IgPT09IDEgJiYgbWlub3IgPj0gMTA7XG4gIHJldHVybiB2MyB8fCB2Ml80IHx8IHYxXzEwO1xuICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9jYW1lbGNhc2UgKi9cbn0iXSwibmFtZXMiOlsiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJpIiwiX2FycmF5V2l0aEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsIlR5cGVFcnJvciIsIm8iLCJtaW5MZW4iLCJfYXJyYXlMaWtlVG9BcnJheSIsIm4iLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW4iLCJsZW5ndGgiLCJhcnIyIiwiX2kiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfeCIsIl9yIiwiX2FyciIsIl9uIiwiX2QiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJ2YWx1ZSIsImVyciIsInJldHVybiIsImlzQXJyYXkiLCJpc01vZGVybkluc2lnaHRzQ2xpZW50IiwiY2xpZW50IiwiX3NwbGl0JG1hcCIsInZlcnNpb24iLCJzcGxpdCIsIm1hcCIsIk51bWJlciIsIl9zcGxpdCRtYXAyIiwibWFqb3IiLCJtaW5vciIsInYzIiwidjJfNCIsInYxXzEwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/isModernInsightsClient.js\n");

/***/ })

};
;