"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0";
exports.ids = ["vendor-chunks/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/checkOptions.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/checkOptions.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkOptions: () => (/* binding */ checkOptions)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/warn.js\");\n\nfunction checkOptions(options) {\n     true ? (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.warn)(!options.debug, \"The `debug` option is meant for development debugging and should not be used in production.\") : 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vY2hlY2tPcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW9EO0FBQzdDLFNBQVNDLGFBQWFDLE9BQU87SUFEcEMsS0FFMkIsR0FBZUYsa0VBQUlBLENBQUMsQ0FBQ0UsUUFBUUMsS0FBSyxFQUFFLGlHQUFpRyxDQUFNO0FBQ3RLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS9jaGVja09wdGlvbnMuanM/NjExZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3YXJuIH0gZnJvbSAnQGFsZ29saWEvYXV0b2NvbXBsZXRlLXNoYXJlZCc7XG5leHBvcnQgZnVuY3Rpb24gY2hlY2tPcHRpb25zKG9wdGlvbnMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm4oIW9wdGlvbnMuZGVidWcsICdUaGUgYGRlYnVnYCBvcHRpb24gaXMgbWVhbnQgZm9yIGRldmVsb3BtZW50IGRlYnVnZ2luZyBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGluIHByb2R1Y3Rpb24uJykgOiB2b2lkIDA7XG59Il0sIm5hbWVzIjpbIndhcm4iLCJjaGVja09wdGlvbnMiLCJvcHRpb25zIiwiZGVidWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/checkOptions.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createAutocomplete.js":
/*!**************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createAutocomplete.js ***!
  \**************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAutocomplete: () => (/* binding */ createAutocomplete)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_plugin_algolia_insights__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @algolia/autocomplete-plugin-algolia-insights */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-plugin-algolia-insights@1.9.3_@algolia+client-search@4.22.1_algoliasear_5dhexvqtv57wkcest2vbiswvme/node_modules/@algolia/autocomplete-plugin-algolia-insights/dist/esm/createAlgoliaInsightsPlugin.js\");\n/* harmony import */ var _checkOptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./checkOptions */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/checkOptions.js\");\n/* harmony import */ var _createStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createStore */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createStore.js\");\n/* harmony import */ var _getAutocompleteSetters__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./getAutocompleteSetters */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getAutocompleteSetters.js\");\n/* harmony import */ var _getDefaultProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getDefaultProps */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getDefaultProps.js\");\n/* harmony import */ var _getPropGetters__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./getPropGetters */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getPropGetters.js\");\n/* harmony import */ var _metadata__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./metadata */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/metadata.js\");\n/* harmony import */ var _onInput__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./onInput */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onInput.js\");\n/* harmony import */ var _stateReducer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./stateReducer */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/stateReducer.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\n\n\n\n\n\n\nfunction createAutocomplete(options) {\n    (0,_checkOptions__WEBPACK_IMPORTED_MODULE_0__.checkOptions)(options);\n    var subscribers = [];\n    var props = (0,_getDefaultProps__WEBPACK_IMPORTED_MODULE_1__.getDefaultProps)(options, subscribers);\n    var store = (0,_createStore__WEBPACK_IMPORTED_MODULE_2__.createStore)(_stateReducer__WEBPACK_IMPORTED_MODULE_3__.stateReducer, props, onStoreStateChange);\n    var setters = (0,_getAutocompleteSetters__WEBPACK_IMPORTED_MODULE_4__.getAutocompleteSetters)({\n        store: store\n    });\n    var propGetters = (0,_getPropGetters__WEBPACK_IMPORTED_MODULE_5__.getPropGetters)(_objectSpread({\n        props: props,\n        refresh: refresh,\n        store: store,\n        navigator: props.navigator\n    }, setters));\n    function onStoreStateChange(_ref) {\n        var prevState = _ref.prevState, state = _ref.state;\n        props.onStateChange(_objectSpread({\n            prevState: prevState,\n            state: state,\n            refresh: refresh,\n            navigator: props.navigator\n        }, setters));\n    }\n    function refresh() {\n        return (0,_onInput__WEBPACK_IMPORTED_MODULE_6__.onInput)(_objectSpread({\n            event: new Event(\"input\"),\n            nextState: {\n                isOpen: store.getState().isOpen\n            },\n            props: props,\n            navigator: props.navigator,\n            query: store.getState().query,\n            refresh: refresh,\n            store: store\n        }, setters));\n    }\n    if (options.insights && !props.plugins.some(function(plugin) {\n        return plugin.name === \"aa.algoliaInsightsPlugin\";\n    })) {\n        var insightsParams = typeof options.insights === \"boolean\" ? {} : options.insights;\n        props.plugins.push((0,_algolia_autocomplete_plugin_algolia_insights__WEBPACK_IMPORTED_MODULE_7__.createAlgoliaInsightsPlugin)(insightsParams));\n    }\n    props.plugins.forEach(function(plugin) {\n        var _plugin$subscribe;\n        return (_plugin$subscribe = plugin.subscribe) === null || _plugin$subscribe === void 0 ? void 0 : _plugin$subscribe.call(plugin, _objectSpread(_objectSpread({}, setters), {}, {\n            navigator: props.navigator,\n            refresh: refresh,\n            onSelect: function onSelect(fn) {\n                subscribers.push({\n                    onSelect: fn\n                });\n            },\n            onActive: function onActive(fn) {\n                subscribers.push({\n                    onActive: fn\n                });\n            },\n            onResolve: function onResolve(fn) {\n                subscribers.push({\n                    onResolve: fn\n                });\n            }\n        }));\n    });\n    (0,_metadata__WEBPACK_IMPORTED_MODULE_8__.injectMetadata)({\n        metadata: (0,_metadata__WEBPACK_IMPORTED_MODULE_8__.getMetadata)({\n            plugins: props.plugins,\n            options: options\n        }),\n        environment: props.environment\n    });\n    return _objectSpread(_objectSpread({\n        refresh: refresh,\n        navigator: props.navigator\n    }, propGetters), setters);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vY3JlYXRlQXV0b2NvbXBsZXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxTQUFTQSxRQUFRQyxHQUFHO0lBQUk7SUFBMkIsT0FBT0QsVUFBVSxjQUFjLE9BQU9FLFVBQVUsWUFBWSxPQUFPQSxPQUFPQyxRQUFRLEdBQUcsU0FBVUYsR0FBRztRQUFJLE9BQU8sT0FBT0E7SUFBSyxJQUFJLFNBQVVBLEdBQUc7UUFBSSxPQUFPQSxPQUFPLGNBQWMsT0FBT0MsVUFBVUQsSUFBSUcsV0FBVyxLQUFLRixVQUFVRCxRQUFRQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtJQUFLLEdBQUdELFFBQVFDO0FBQU07QUFDL1UsU0FBU0ssUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRjtJQUFTLElBQUlHLE9BQU9DLHFCQUFxQixFQUFFO1FBQUUsSUFBSUMsVUFBVUYsT0FBT0MscUJBQXFCLENBQUNKO1FBQVNDLGtCQUFtQkksQ0FBQUEsVUFBVUEsUUFBUUMsTUFBTSxDQUFDLFNBQVVDLEdBQUc7WUFBSSxPQUFPSixPQUFPSyx3QkFBd0IsQ0FBQ1IsUUFBUU8sS0FBS0UsVUFBVTtRQUFFLEVBQUMsR0FBSVAsS0FBS1EsSUFBSSxDQUFDQyxLQUFLLENBQUNULE1BQU1HO0lBQVU7SUFBRSxPQUFPSDtBQUFNO0FBQ3BWLFNBQVNVLGNBQWNDLE1BQU07SUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1FBQUUsSUFBSUcsU0FBUyxRQUFRRixTQUFTLENBQUNELEVBQUUsR0FBR0MsU0FBUyxDQUFDRCxFQUFFLEdBQUcsQ0FBQztRQUFHQSxJQUFJLElBQUlmLFFBQVFJLE9BQU9jLFNBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJQyxnQkFBZ0JQLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtRQUFHLEtBQUtoQixPQUFPa0IseUJBQXlCLEdBQUdsQixPQUFPbUIsZ0JBQWdCLENBQUNULFFBQVFWLE9BQU9rQix5QkFBeUIsQ0FBQ0osV0FBV2xCLFFBQVFJLE9BQU9jLFNBQVNDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUloQixPQUFPb0IsY0FBYyxDQUFDVixRQUFRTSxLQUFLaEIsT0FBT0ssd0JBQXdCLENBQUNTLFFBQVFFO1FBQU87SUFBSTtJQUFFLE9BQU9OO0FBQVE7QUFDemYsU0FBU08sZ0JBQWdCMUIsR0FBRyxFQUFFeUIsR0FBRyxFQUFFSyxLQUFLO0lBQUlMLE1BQU1NLGVBQWVOO0lBQU0sSUFBSUEsT0FBT3pCLEtBQUs7UUFBRVMsT0FBT29CLGNBQWMsQ0FBQzdCLEtBQUt5QixLQUFLO1lBQUVLLE9BQU9BO1lBQU9mLFlBQVk7WUFBTWlCLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFakMsR0FBRyxDQUFDeUIsSUFBSSxHQUFHSztJQUFPO0lBQUUsT0FBTzlCO0FBQUs7QUFDM08sU0FBUytCLGVBQWVHLEdBQUc7SUFBSSxJQUFJVCxNQUFNVSxhQUFhRCxLQUFLO0lBQVcsT0FBT25DLFFBQVEwQixTQUFTLFdBQVdBLE1BQU1XLE9BQU9YO0FBQU07QUFDNUgsU0FBU1UsYUFBYUUsS0FBSyxFQUFFQyxJQUFJO0lBQUksSUFBSXZDLFFBQVFzQyxXQUFXLFlBQVlBLFVBQVUsTUFBTSxPQUFPQTtJQUFPLElBQUlFLE9BQU9GLEtBQUssQ0FBQ3BDLE9BQU91QyxXQUFXLENBQUM7SUFBRSxJQUFJRCxTQUFTRSxXQUFXO1FBQUUsSUFBSUMsTUFBTUgsS0FBS0ksSUFBSSxDQUFDTixPQUFPQyxRQUFRO1FBQVksSUFBSXZDLFFBQVEyQyxTQUFTLFVBQVUsT0FBT0E7UUFBSyxNQUFNLElBQUlFLFVBQVU7SUFBaUQ7SUFBRSxPQUFPLENBQUNOLFNBQVMsV0FBV0YsU0FBU1MsTUFBSyxFQUFHUjtBQUFRO0FBQ2hTO0FBQzlDO0FBQ0Y7QUFDc0I7QUFDZDtBQUNGO0FBQ087QUFDckI7QUFDVTtBQUN2QyxTQUFTbUIsbUJBQW1CQyxPQUFPO0lBQ3hDViwyREFBWUEsQ0FBQ1U7SUFDYixJQUFJQyxjQUFjLEVBQUU7SUFDcEIsSUFBSUMsUUFBUVQsaUVBQWVBLENBQUNPLFNBQVNDO0lBQ3JDLElBQUlFLFFBQVFaLHlEQUFXQSxDQUFDTyx1REFBWUEsRUFBRUksT0FBT0U7SUFDN0MsSUFBSUMsVUFBVWIsK0VBQXNCQSxDQUFDO1FBQ25DVyxPQUFPQTtJQUNUO0lBQ0EsSUFBSUcsY0FBY1osK0RBQWNBLENBQUNqQyxjQUFjO1FBQzdDeUMsT0FBT0E7UUFDUEssU0FBU0E7UUFDVEosT0FBT0E7UUFDUEssV0FBV04sTUFBTU0sU0FBUztJQUM1QixHQUFHSDtJQUNILFNBQVNELG1CQUFtQkssSUFBSTtRQUM5QixJQUFJQyxZQUFZRCxLQUFLQyxTQUFTLEVBQzVCQyxRQUFRRixLQUFLRSxLQUFLO1FBQ3BCVCxNQUFNVSxhQUFhLENBQUNuRCxjQUFjO1lBQ2hDaUQsV0FBV0E7WUFDWEMsT0FBT0E7WUFDUEosU0FBU0E7WUFDVEMsV0FBV04sTUFBTU0sU0FBUztRQUM1QixHQUFHSDtJQUNMO0lBQ0EsU0FBU0U7UUFDUCxPQUFPVixpREFBT0EsQ0FBQ3BDLGNBQWM7WUFDM0JvRCxPQUFPLElBQUlDLE1BQU07WUFDakJDLFdBQVc7Z0JBQ1RDLFFBQVFiLE1BQU1jLFFBQVEsR0FBR0QsTUFBTTtZQUNqQztZQUNBZCxPQUFPQTtZQUNQTSxXQUFXTixNQUFNTSxTQUFTO1lBQzFCVSxPQUFPZixNQUFNYyxRQUFRLEdBQUdDLEtBQUs7WUFDN0JYLFNBQVNBO1lBQ1RKLE9BQU9BO1FBQ1QsR0FBR0U7SUFDTDtJQUNBLElBQUlMLFFBQVFtQixRQUFRLElBQUksQ0FBQ2pCLE1BQU1rQixPQUFPLENBQUNDLElBQUksQ0FBQyxTQUFVQyxNQUFNO1FBQzFELE9BQU9BLE9BQU9DLElBQUksS0FBSztJQUN6QixJQUFJO1FBQ0YsSUFBSUMsaUJBQWlCLE9BQU94QixRQUFRbUIsUUFBUSxLQUFLLFlBQVksQ0FBQyxJQUFJbkIsUUFBUW1CLFFBQVE7UUFDbEZqQixNQUFNa0IsT0FBTyxDQUFDN0QsSUFBSSxDQUFDOEIsMEdBQTJCQSxDQUFDbUM7SUFDakQ7SUFDQXRCLE1BQU1rQixPQUFPLENBQUNyRCxPQUFPLENBQUMsU0FBVXVELE1BQU07UUFDcEMsSUFBSUc7UUFDSixPQUFPLENBQUNBLG9CQUFvQkgsT0FBT0ksU0FBUyxNQUFNLFFBQVFELHNCQUFzQixLQUFLLElBQUksS0FBSyxJQUFJQSxrQkFBa0J2QyxJQUFJLENBQUNvQyxRQUFRN0QsY0FBY0EsY0FBYyxDQUFDLEdBQUc0QyxVQUFVLENBQUMsR0FBRztZQUM3S0csV0FBV04sTUFBTU0sU0FBUztZQUMxQkQsU0FBU0E7WUFDVG9CLFVBQVUsU0FBU0EsU0FBU0MsRUFBRTtnQkFDNUIzQixZQUFZMUMsSUFBSSxDQUFDO29CQUNmb0UsVUFBVUM7Z0JBQ1o7WUFDRjtZQUNBQyxVQUFVLFNBQVNBLFNBQVNELEVBQUU7Z0JBQzVCM0IsWUFBWTFDLElBQUksQ0FBQztvQkFDZnNFLFVBQVVEO2dCQUNaO1lBQ0Y7WUFDQUUsV0FBVyxTQUFTQSxVQUFVRixFQUFFO2dCQUM5QjNCLFlBQVkxQyxJQUFJLENBQUM7b0JBQ2Z1RSxXQUFXRjtnQkFDYjtZQUNGO1FBQ0Y7SUFDRjtJQUNBaEMseURBQWNBLENBQUM7UUFDYm1DLFVBQVVwQyxzREFBV0EsQ0FBQztZQUNwQnlCLFNBQVNsQixNQUFNa0IsT0FBTztZQUN0QnBCLFNBQVNBO1FBQ1g7UUFDQWdDLGFBQWE5QixNQUFNOEIsV0FBVztJQUNoQztJQUNBLE9BQU92RSxjQUFjQSxjQUFjO1FBQ2pDOEMsU0FBU0E7UUFDVEMsV0FBV04sTUFBTU0sU0FBUztJQUM1QixHQUFHRixjQUFjRDtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3RhaWx3aW5kLW5leHRqcy1zdGFydGVyLWJsb2cvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vY3JlYXRlQXV0b2NvbXBsZXRlLmpzP2RjOTUiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCBcInN0cmluZ1wiKTsgcmV0dXJuIF90eXBlb2Yoa2V5KSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKF90eXBlb2YoaW5wdXQpICE9PSBcIm9iamVjdFwiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTsgaWYgKF90eXBlb2YocmVzKSAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuXCIpOyB9IHJldHVybiAoaGludCA9PT0gXCJzdHJpbmdcIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9XG5pbXBvcnQgeyBjcmVhdGVBbGdvbGlhSW5zaWdodHNQbHVnaW4gfSBmcm9tICdAYWxnb2xpYS9hdXRvY29tcGxldGUtcGx1Z2luLWFsZ29saWEtaW5zaWdodHMnO1xuaW1wb3J0IHsgY2hlY2tPcHRpb25zIH0gZnJvbSAnLi9jaGVja09wdGlvbnMnO1xuaW1wb3J0IHsgY3JlYXRlU3RvcmUgfSBmcm9tICcuL2NyZWF0ZVN0b3JlJztcbmltcG9ydCB7IGdldEF1dG9jb21wbGV0ZVNldHRlcnMgfSBmcm9tICcuL2dldEF1dG9jb21wbGV0ZVNldHRlcnMnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdFByb3BzIH0gZnJvbSAnLi9nZXREZWZhdWx0UHJvcHMnO1xuaW1wb3J0IHsgZ2V0UHJvcEdldHRlcnMgfSBmcm9tICcuL2dldFByb3BHZXR0ZXJzJztcbmltcG9ydCB7IGdldE1ldGFkYXRhLCBpbmplY3RNZXRhZGF0YSB9IGZyb20gJy4vbWV0YWRhdGEnO1xuaW1wb3J0IHsgb25JbnB1dCB9IGZyb20gJy4vb25JbnB1dCc7XG5pbXBvcnQgeyBzdGF0ZVJlZHVjZXIgfSBmcm9tICcuL3N0YXRlUmVkdWNlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQXV0b2NvbXBsZXRlKG9wdGlvbnMpIHtcbiAgY2hlY2tPcHRpb25zKG9wdGlvbnMpO1xuICB2YXIgc3Vic2NyaWJlcnMgPSBbXTtcbiAgdmFyIHByb3BzID0gZ2V0RGVmYXVsdFByb3BzKG9wdGlvbnMsIHN1YnNjcmliZXJzKTtcbiAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUoc3RhdGVSZWR1Y2VyLCBwcm9wcywgb25TdG9yZVN0YXRlQ2hhbmdlKTtcbiAgdmFyIHNldHRlcnMgPSBnZXRBdXRvY29tcGxldGVTZXR0ZXJzKHtcbiAgICBzdG9yZTogc3RvcmVcbiAgfSk7XG4gIHZhciBwcm9wR2V0dGVycyA9IGdldFByb3BHZXR0ZXJzKF9vYmplY3RTcHJlYWQoe1xuICAgIHByb3BzOiBwcm9wcyxcbiAgICByZWZyZXNoOiByZWZyZXNoLFxuICAgIHN0b3JlOiBzdG9yZSxcbiAgICBuYXZpZ2F0b3I6IHByb3BzLm5hdmlnYXRvclxuICB9LCBzZXR0ZXJzKSk7XG4gIGZ1bmN0aW9uIG9uU3RvcmVTdGF0ZUNoYW5nZShfcmVmKSB7XG4gICAgdmFyIHByZXZTdGF0ZSA9IF9yZWYucHJldlN0YXRlLFxuICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICAgIHByb3BzLm9uU3RhdGVDaGFuZ2UoX29iamVjdFNwcmVhZCh7XG4gICAgICBwcmV2U3RhdGU6IHByZXZTdGF0ZSxcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHJlZnJlc2g6IHJlZnJlc2gsXG4gICAgICBuYXZpZ2F0b3I6IHByb3BzLm5hdmlnYXRvclxuICAgIH0sIHNldHRlcnMpKTtcbiAgfVxuICBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgIHJldHVybiBvbklucHV0KF9vYmplY3RTcHJlYWQoe1xuICAgICAgZXZlbnQ6IG5ldyBFdmVudCgnaW5wdXQnKSxcbiAgICAgIG5leHRTdGF0ZToge1xuICAgICAgICBpc09wZW46IHN0b3JlLmdldFN0YXRlKCkuaXNPcGVuXG4gICAgICB9LFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgbmF2aWdhdG9yOiBwcm9wcy5uYXZpZ2F0b3IsXG4gICAgICBxdWVyeTogc3RvcmUuZ2V0U3RhdGUoKS5xdWVyeSxcbiAgICAgIHJlZnJlc2g6IHJlZnJlc2gsXG4gICAgICBzdG9yZTogc3RvcmVcbiAgICB9LCBzZXR0ZXJzKSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaW5zaWdodHMgJiYgIXByb3BzLnBsdWdpbnMuc29tZShmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgcmV0dXJuIHBsdWdpbi5uYW1lID09PSAnYWEuYWxnb2xpYUluc2lnaHRzUGx1Z2luJztcbiAgfSkpIHtcbiAgICB2YXIgaW5zaWdodHNQYXJhbXMgPSB0eXBlb2Ygb3B0aW9ucy5pbnNpZ2h0cyA9PT0gJ2Jvb2xlYW4nID8ge30gOiBvcHRpb25zLmluc2lnaHRzO1xuICAgIHByb3BzLnBsdWdpbnMucHVzaChjcmVhdGVBbGdvbGlhSW5zaWdodHNQbHVnaW4oaW5zaWdodHNQYXJhbXMpKTtcbiAgfVxuICBwcm9wcy5wbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBfcGx1Z2luJHN1YnNjcmliZTtcbiAgICByZXR1cm4gKF9wbHVnaW4kc3Vic2NyaWJlID0gcGx1Z2luLnN1YnNjcmliZSkgPT09IG51bGwgfHwgX3BsdWdpbiRzdWJzY3JpYmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wbHVnaW4kc3Vic2NyaWJlLmNhbGwocGx1Z2luLCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNldHRlcnMpLCB7fSwge1xuICAgICAgbmF2aWdhdG9yOiBwcm9wcy5uYXZpZ2F0b3IsXG4gICAgICByZWZyZXNoOiByZWZyZXNoLFxuICAgICAgb25TZWxlY3Q6IGZ1bmN0aW9uIG9uU2VsZWN0KGZuKSB7XG4gICAgICAgIHN1YnNjcmliZXJzLnB1c2goe1xuICAgICAgICAgIG9uU2VsZWN0OiBmblxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbkFjdGl2ZTogZnVuY3Rpb24gb25BY3RpdmUoZm4pIHtcbiAgICAgICAgc3Vic2NyaWJlcnMucHVzaCh7XG4gICAgICAgICAgb25BY3RpdmU6IGZuXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uUmVzb2x2ZTogZnVuY3Rpb24gb25SZXNvbHZlKGZuKSB7XG4gICAgICAgIHN1YnNjcmliZXJzLnB1c2goe1xuICAgICAgICAgIG9uUmVzb2x2ZTogZm5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpO1xuICB9KTtcbiAgaW5qZWN0TWV0YWRhdGEoe1xuICAgIG1ldGFkYXRhOiBnZXRNZXRhZGF0YSh7XG4gICAgICBwbHVnaW5zOiBwcm9wcy5wbHVnaW5zLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0pLFxuICAgIGVudmlyb25tZW50OiBwcm9wcy5lbnZpcm9ubWVudFxuICB9KTtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgcmVmcmVzaDogcmVmcmVzaCxcbiAgICBuYXZpZ2F0b3I6IHByb3BzLm5hdmlnYXRvclxuICB9LCBwcm9wR2V0dGVycyksIHNldHRlcnMpO1xufSJdLCJuYW1lcyI6WyJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiY3JlYXRlQWxnb2xpYUluc2lnaHRzUGx1Z2luIiwiY2hlY2tPcHRpb25zIiwiY3JlYXRlU3RvcmUiLCJnZXRBdXRvY29tcGxldGVTZXR0ZXJzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0UHJvcEdldHRlcnMiLCJnZXRNZXRhZGF0YSIsImluamVjdE1ldGFkYXRhIiwib25JbnB1dCIsInN0YXRlUmVkdWNlciIsImNyZWF0ZUF1dG9jb21wbGV0ZSIsIm9wdGlvbnMiLCJzdWJzY3JpYmVycyIsInByb3BzIiwic3RvcmUiLCJvblN0b3JlU3RhdGVDaGFuZ2UiLCJzZXR0ZXJzIiwicHJvcEdldHRlcnMiLCJyZWZyZXNoIiwibmF2aWdhdG9yIiwiX3JlZiIsInByZXZTdGF0ZSIsInN0YXRlIiwib25TdGF0ZUNoYW5nZSIsImV2ZW50IiwiRXZlbnQiLCJuZXh0U3RhdGUiLCJpc09wZW4iLCJnZXRTdGF0ZSIsInF1ZXJ5IiwiaW5zaWdodHMiLCJwbHVnaW5zIiwic29tZSIsInBsdWdpbiIsIm5hbWUiLCJpbnNpZ2h0c1BhcmFtcyIsIl9wbHVnaW4kc3Vic2NyaWJlIiwic3Vic2NyaWJlIiwib25TZWxlY3QiLCJmbiIsIm9uQWN0aXZlIiwib25SZXNvbHZlIiwibWV0YWRhdGEiLCJlbnZpcm9ubWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createAutocomplete.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createStore.js":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createStore.js ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStore: () => (/* binding */ createStore)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromiseList.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction createStore(reducer, props, onStoreStateChange) {\n    var state = props.initialState;\n    return {\n        getState: function getState() {\n            return state;\n        },\n        dispatch: function dispatch(action, payload) {\n            var prevState = _objectSpread({}, state);\n            state = reducer(state, {\n                type: action,\n                props: props,\n                payload: payload\n            });\n            onStoreStateChange({\n                state: state,\n                prevState: prevState\n            });\n        },\n        pendingRequests: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.createCancelablePromiseList)()\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vY3JlYXRlU3RvcmUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxRQUFRQyxHQUFHO0lBQUk7SUFBMkIsT0FBT0QsVUFBVSxjQUFjLE9BQU9FLFVBQVUsWUFBWSxPQUFPQSxPQUFPQyxRQUFRLEdBQUcsU0FBVUYsR0FBRztRQUFJLE9BQU8sT0FBT0E7SUFBSyxJQUFJLFNBQVVBLEdBQUc7UUFBSSxPQUFPQSxPQUFPLGNBQWMsT0FBT0MsVUFBVUQsSUFBSUcsV0FBVyxLQUFLRixVQUFVRCxRQUFRQyxPQUFPRyxTQUFTLEdBQUcsV0FBVyxPQUFPSjtJQUFLLEdBQUdELFFBQVFDO0FBQU07QUFDL1UsU0FBU0ssUUFBUUMsTUFBTSxFQUFFQyxjQUFjO0lBQUksSUFBSUMsT0FBT0MsT0FBT0QsSUFBSSxDQUFDRjtJQUFTLElBQUlHLE9BQU9DLHFCQUFxQixFQUFFO1FBQUUsSUFBSUMsVUFBVUYsT0FBT0MscUJBQXFCLENBQUNKO1FBQVNDLGtCQUFtQkksQ0FBQUEsVUFBVUEsUUFBUUMsTUFBTSxDQUFDLFNBQVVDLEdBQUc7WUFBSSxPQUFPSixPQUFPSyx3QkFBd0IsQ0FBQ1IsUUFBUU8sS0FBS0UsVUFBVTtRQUFFLEVBQUMsR0FBSVAsS0FBS1EsSUFBSSxDQUFDQyxLQUFLLENBQUNULE1BQU1HO0lBQVU7SUFBRSxPQUFPSDtBQUFNO0FBQ3BWLFNBQVNVLGNBQWNDLE1BQU07SUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1FBQUUsSUFBSUcsU0FBUyxRQUFRRixTQUFTLENBQUNELEVBQUUsR0FBR0MsU0FBUyxDQUFDRCxFQUFFLEdBQUcsQ0FBQztRQUFHQSxJQUFJLElBQUlmLFFBQVFJLE9BQU9jLFNBQVMsQ0FBQyxHQUFHQyxPQUFPLENBQUMsU0FBVUMsR0FBRztZQUFJQyxnQkFBZ0JQLFFBQVFNLEtBQUtGLE1BQU0sQ0FBQ0UsSUFBSTtRQUFHLEtBQUtoQixPQUFPa0IseUJBQXlCLEdBQUdsQixPQUFPbUIsZ0JBQWdCLENBQUNULFFBQVFWLE9BQU9rQix5QkFBeUIsQ0FBQ0osV0FBV2xCLFFBQVFJLE9BQU9jLFNBQVNDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUloQixPQUFPb0IsY0FBYyxDQUFDVixRQUFRTSxLQUFLaEIsT0FBT0ssd0JBQXdCLENBQUNTLFFBQVFFO1FBQU87SUFBSTtJQUFFLE9BQU9OO0FBQVE7QUFDemYsU0FBU08sZ0JBQWdCMUIsR0FBRyxFQUFFeUIsR0FBRyxFQUFFSyxLQUFLO0lBQUlMLE1BQU1NLGVBQWVOO0lBQU0sSUFBSUEsT0FBT3pCLEtBQUs7UUFBRVMsT0FBT29CLGNBQWMsQ0FBQzdCLEtBQUt5QixLQUFLO1lBQUVLLE9BQU9BO1lBQU9mLFlBQVk7WUFBTWlCLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFakMsR0FBRyxDQUFDeUIsSUFBSSxHQUFHSztJQUFPO0lBQUUsT0FBTzlCO0FBQUs7QUFDM08sU0FBUytCLGVBQWVHLEdBQUc7SUFBSSxJQUFJVCxNQUFNVSxhQUFhRCxLQUFLO0lBQVcsT0FBT25DLFFBQVEwQixTQUFTLFdBQVdBLE1BQU1XLE9BQU9YO0FBQU07QUFDNUgsU0FBU1UsYUFBYUUsS0FBSyxFQUFFQyxJQUFJO0lBQUksSUFBSXZDLFFBQVFzQyxXQUFXLFlBQVlBLFVBQVUsTUFBTSxPQUFPQTtJQUFPLElBQUlFLE9BQU9GLEtBQUssQ0FBQ3BDLE9BQU91QyxXQUFXLENBQUM7SUFBRSxJQUFJRCxTQUFTRSxXQUFXO1FBQUUsSUFBSUMsTUFBTUgsS0FBS0ksSUFBSSxDQUFDTixPQUFPQyxRQUFRO1FBQVksSUFBSXZDLFFBQVEyQyxTQUFTLFVBQVUsT0FBT0E7UUFBSyxNQUFNLElBQUlFLFVBQVU7SUFBaUQ7SUFBRSxPQUFPLENBQUNOLFNBQVMsV0FBV0YsU0FBU1MsTUFBSyxFQUFHUjtBQUFRO0FBQ3RVO0FBQy9DLFNBQVNVLFlBQVlDLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxrQkFBa0I7SUFDNUQsSUFBSUMsUUFBUUYsTUFBTUcsWUFBWTtJQUM5QixPQUFPO1FBQ0xDLFVBQVUsU0FBU0E7WUFDakIsT0FBT0Y7UUFDVDtRQUNBRyxVQUFVLFNBQVNBLFNBQVNDLE1BQU0sRUFBRUMsT0FBTztZQUN6QyxJQUFJQyxZQUFZdkMsY0FBYyxDQUFDLEdBQUdpQztZQUNsQ0EsUUFBUUgsUUFBUUcsT0FBTztnQkFDckJPLE1BQU1IO2dCQUNOTixPQUFPQTtnQkFDUE8sU0FBU0E7WUFDWDtZQUNBTixtQkFBbUI7Z0JBQ2pCQyxPQUFPQTtnQkFDUE0sV0FBV0E7WUFDYjtRQUNGO1FBQ0FFLGlCQUFpQmIsbUVBQTJCQTtJQUM5QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS9jcmVhdGVTdG9yZS5qcz82NzM1Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuaW1wb3J0IHsgY3JlYXRlQ2FuY2VsYWJsZVByb21pc2VMaXN0IH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJvcHMsIG9uU3RvcmVTdGF0ZUNoYW5nZSkge1xuICB2YXIgc3RhdGUgPSBwcm9wcy5pbml0aWFsU3RhdGU7XG4gIHJldHVybiB7XG4gICAgZ2V0U3RhdGU6IGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH0sXG4gICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbiwgcGF5bG9hZCkge1xuICAgICAgdmFyIHByZXZTdGF0ZSA9IF9vYmplY3RTcHJlYWQoe30sIHN0YXRlKTtcbiAgICAgIHN0YXRlID0gcmVkdWNlcihzdGF0ZSwge1xuICAgICAgICB0eXBlOiBhY3Rpb24sXG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgICAgfSk7XG4gICAgICBvblN0b3JlU3RhdGVDaGFuZ2Uoe1xuICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgIHByZXZTdGF0ZTogcHJldlN0YXRlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHBlbmRpbmdSZXF1ZXN0czogY3JlYXRlQ2FuY2VsYWJsZVByb21pc2VMaXN0KClcbiAgfTtcbn0iXSwibmFtZXMiOlsiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJrZXlzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsImZpbHRlciIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsImNyZWF0ZUNhbmNlbGFibGVQcm9taXNlTGlzdCIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByb3BzIiwib25TdG9yZVN0YXRlQ2hhbmdlIiwic3RhdGUiLCJpbml0aWFsU3RhdGUiLCJnZXRTdGF0ZSIsImRpc3BhdGNoIiwiYWN0aW9uIiwicGF5bG9hZCIsInByZXZTdGF0ZSIsInR5cGUiLCJwZW5kaW5nUmVxdWVzdHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/createStore.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getAutocompleteSetters.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getAutocompleteSetters.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAutocompleteSetters: () => (/* binding */ getAutocompleteSetters)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/flatten.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction getAutocompleteSetters(_ref) {\n    var store = _ref.store;\n    var setActiveItemId = function setActiveItemId(value) {\n        store.dispatch(\"setActiveItemId\", value);\n    };\n    var setQuery = function setQuery(value) {\n        store.dispatch(\"setQuery\", value);\n    };\n    var setCollections = function setCollections(rawValue) {\n        var baseItemId = 0;\n        var value = rawValue.map(function(collection) {\n            return _objectSpread(_objectSpread({}, collection), {}, {\n                // We flatten the stored items to support calling `getAlgoliaResults`\n                // from the source itself.\n                items: (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.flatten)(collection.items).map(function(item) {\n                    return _objectSpread(_objectSpread({}, item), {}, {\n                        __autocomplete_id: baseItemId++\n                    });\n                })\n            });\n        });\n        store.dispatch(\"setCollections\", value);\n    };\n    var setIsOpen = function setIsOpen(value) {\n        store.dispatch(\"setIsOpen\", value);\n    };\n    var setStatus = function setStatus(value) {\n        store.dispatch(\"setStatus\", value);\n    };\n    var setContext = function setContext(value) {\n        store.dispatch(\"setContext\", value);\n    };\n    return {\n        setActiveItemId: setActiveItemId,\n        setQuery: setQuery,\n        setCollections: setCollections,\n        setIsOpen: setIsOpen,\n        setStatus: setStatus,\n        setContext: setContext\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getAutocompleteSetters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getCompletion.js":
/*!*********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getCompletion.js ***!
  \*********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCompletion: () => (/* binding */ getCompletion)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js\");\n\nfunction getCompletion(_ref) {\n    var _getActiveItem;\n    var state = _ref.state;\n    if (state.isOpen === false || state.activeItemId === null) {\n        return null;\n    }\n    return ((_getActiveItem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getActiveItem)(state)) === null || _getActiveItem === void 0 ? void 0 : _getActiveItem.itemInputValue) || null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vZ2V0Q29tcGxldGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3QztBQUNqQyxTQUFTQyxjQUFjQyxJQUFJO0lBQ2hDLElBQUlDO0lBQ0osSUFBSUMsUUFBUUYsS0FBS0UsS0FBSztJQUN0QixJQUFJQSxNQUFNQyxNQUFNLEtBQUssU0FBU0QsTUFBTUUsWUFBWSxLQUFLLE1BQU07UUFDekQsT0FBTztJQUNUO0lBQ0EsT0FBTyxDQUFDLENBQUNILGlCQUFpQkgscURBQWFBLENBQUNJLE1BQUssTUFBTyxRQUFRRCxtQkFBbUIsS0FBSyxJQUFJLEtBQUssSUFBSUEsZUFBZUksY0FBYyxLQUFLO0FBQ3JJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS9nZXRDb21wbGV0aW9uLmpzPzMwMjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QWN0aXZlSXRlbSB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBsZXRpb24oX3JlZikge1xuICB2YXIgX2dldEFjdGl2ZUl0ZW07XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIGlmIChzdGF0ZS5pc09wZW4gPT09IGZhbHNlIHx8IHN0YXRlLmFjdGl2ZUl0ZW1JZCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAoKF9nZXRBY3RpdmVJdGVtID0gZ2V0QWN0aXZlSXRlbShzdGF0ZSkpID09PSBudWxsIHx8IF9nZXRBY3RpdmVJdGVtID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0QWN0aXZlSXRlbS5pdGVtSW5wdXRWYWx1ZSkgfHwgbnVsbDtcbn0iXSwibmFtZXMiOlsiZ2V0QWN0aXZlSXRlbSIsImdldENvbXBsZXRpb24iLCJfcmVmIiwiX2dldEFjdGl2ZUl0ZW0iLCJzdGF0ZSIsImlzT3BlbiIsImFjdGl2ZUl0ZW1JZCIsIml0ZW1JbnB1dFZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getCompletion.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getDefaultProps.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getDefaultProps.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProps: () => (/* binding */ getDefaultProps)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/getItemsCount.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/generateAutocompleteId.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/flatten.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNormalizedSources.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\nfunction getDefaultProps(props, pluginSubscribers) {\n    var _props$id;\n    /* eslint-disable no-restricted-globals */ var environment =  false ? 0 : {};\n    /* eslint-enable no-restricted-globals */ var plugins = props.plugins || [];\n    return _objectSpread(_objectSpread({\n        debug: false,\n        openOnFocus: false,\n        placeholder: \"\",\n        autoFocus: false,\n        defaultActiveItemId: null,\n        stallThreshold: 300,\n        insights: false,\n        environment: environment,\n        shouldPanelOpen: function shouldPanelOpen(_ref) {\n            var state = _ref.state;\n            return (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.getItemsCount)(state) > 0;\n        },\n        reshape: function reshape(_ref2) {\n            var sources = _ref2.sources;\n            return sources;\n        }\n    }, props), {}, {\n        // Since `generateAutocompleteId` triggers a side effect (it increments\n        // an internal counter), we don't want to execute it if unnecessary.\n        id: (_props$id = props.id) !== null && _props$id !== void 0 ? _props$id : (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__.generateAutocompleteId)(),\n        plugins: plugins,\n        // The following props need to be deeply defaulted.\n        initialState: _objectSpread({\n            activeItemId: null,\n            query: \"\",\n            completion: null,\n            collections: [],\n            isOpen: false,\n            status: \"idle\",\n            context: {}\n        }, props.initialState),\n        onStateChange: function onStateChange(params) {\n            var _props$onStateChange;\n            (_props$onStateChange = props.onStateChange) === null || _props$onStateChange === void 0 ? void 0 : _props$onStateChange.call(props, params);\n            plugins.forEach(function(x) {\n                var _x$onStateChange;\n                return (_x$onStateChange = x.onStateChange) === null || _x$onStateChange === void 0 ? void 0 : _x$onStateChange.call(x, params);\n            });\n        },\n        onSubmit: function onSubmit(params) {\n            var _props$onSubmit;\n            (_props$onSubmit = props.onSubmit) === null || _props$onSubmit === void 0 ? void 0 : _props$onSubmit.call(props, params);\n            plugins.forEach(function(x) {\n                var _x$onSubmit;\n                return (_x$onSubmit = x.onSubmit) === null || _x$onSubmit === void 0 ? void 0 : _x$onSubmit.call(x, params);\n            });\n        },\n        onReset: function onReset(params) {\n            var _props$onReset;\n            (_props$onReset = props.onReset) === null || _props$onReset === void 0 ? void 0 : _props$onReset.call(props, params);\n            plugins.forEach(function(x) {\n                var _x$onReset;\n                return (_x$onReset = x.onReset) === null || _x$onReset === void 0 ? void 0 : _x$onReset.call(x, params);\n            });\n        },\n        getSources: function getSources(params) {\n            return Promise.all([].concat(_toConsumableArray(plugins.map(function(plugin) {\n                return plugin.getSources;\n            })), [\n                props.getSources\n            ]).filter(Boolean).map(function(getSources) {\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getNormalizedSources)(getSources, params);\n            })).then(function(nested) {\n                return (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_3__.flatten)(nested);\n            }).then(function(sources) {\n                return sources.map(function(source) {\n                    return _objectSpread(_objectSpread({}, source), {}, {\n                        onSelect: function onSelect(params) {\n                            source.onSelect(params);\n                            pluginSubscribers.forEach(function(x) {\n                                var _x$onSelect;\n                                return (_x$onSelect = x.onSelect) === null || _x$onSelect === void 0 ? void 0 : _x$onSelect.call(x, params);\n                            });\n                        },\n                        onActive: function onActive(params) {\n                            source.onActive(params);\n                            pluginSubscribers.forEach(function(x) {\n                                var _x$onActive;\n                                return (_x$onActive = x.onActive) === null || _x$onActive === void 0 ? void 0 : _x$onActive.call(x, params);\n                            });\n                        },\n                        onResolve: function onResolve(params) {\n                            source.onResolve(params);\n                            pluginSubscribers.forEach(function(x) {\n                                var _x$onResolve;\n                                return (_x$onResolve = x.onResolve) === null || _x$onResolve === void 0 ? void 0 : _x$onResolve.call(x, params);\n                            });\n                        }\n                    });\n                });\n            });\n        },\n        navigator: _objectSpread({\n            navigate: function navigate(_ref3) {\n                var itemUrl = _ref3.itemUrl;\n                environment.location.assign(itemUrl);\n            },\n            navigateNewTab: function navigateNewTab(_ref4) {\n                var itemUrl = _ref4.itemUrl;\n                var windowReference = environment.open(itemUrl, \"_blank\", \"noopener\");\n                windowReference === null || windowReference === void 0 ? void 0 : windowReference.focus();\n            },\n            navigateNewWindow: function navigateNewWindow(_ref5) {\n                var itemUrl = _ref5.itemUrl;\n                environment.open(itemUrl, \"_blank\", \"noopener\");\n            }\n        }, props.navigator)\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getDefaultProps.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getPropGetters.js":
/*!**********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getPropGetters.js ***!
  \**********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPropGetters: () => (/* binding */ getPropGetters)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/noop.js\");\n/* harmony import */ var _onInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./onInput */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onInput.js\");\n/* harmony import */ var _onKeyDown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./onKeyDown */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onKeyDown.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isOrContainsNode.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isSamsung.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"props\",\n    \"refresh\",\n    \"store\"\n], _excluded2 = [\n    \"inputElement\",\n    \"formElement\",\n    \"panelElement\"\n], _excluded3 = [\n    \"inputElement\"\n], _excluded4 = [\n    \"inputElement\",\n    \"maxLength\"\n], _excluded5 = [\n    \"sourceIndex\"\n], _excluded6 = [\n    \"sourceIndex\"\n], _excluded7 = [\n    \"item\",\n    \"source\",\n    \"sourceIndex\"\n];\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\n\nfunction getPropGetters(_ref) {\n    var props = _ref.props, refresh = _ref.refresh, store = _ref.store, setters = _objectWithoutProperties(_ref, _excluded);\n    var getEnvironmentProps = function getEnvironmentProps(providedProps) {\n        var inputElement = providedProps.inputElement, formElement = providedProps.formElement, panelElement = providedProps.panelElement, rest = _objectWithoutProperties(providedProps, _excluded2);\n        function onMouseDownOrTouchStart(event) {\n            // The `onTouchStart`/`onMouseDown` events shouldn't trigger the `blur`\n            // handler when it's not an interaction with Autocomplete.\n            // We detect it with the following heuristics:\n            // - the panel is closed AND there are no pending requests\n            //   (no interaction with the autocomplete, no future state updates)\n            // - OR the touched target is the input element (should open the panel)\n            var isAutocompleteInteraction = store.getState().isOpen || !store.pendingRequests.isEmpty();\n            if (!isAutocompleteInteraction || event.target === inputElement) {\n                return;\n            }\n            // @TODO: support cases where there are multiple Autocomplete instances.\n            // Right now, a second instance makes this computation return false.\n            var isTargetWithinAutocomplete = [\n                formElement,\n                panelElement\n            ].some(function(contextNode) {\n                return (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isOrContainsNode)(contextNode, event.target);\n            });\n            if (isTargetWithinAutocomplete === false) {\n                store.dispatch(\"blur\", null);\n                // If requests are still pending when the user closes the panel, they\n                // could reopen the panel once they resolve.\n                // We want to prevent any subsequent query from reopening the panel\n                // because it would result in an unsolicited UI behavior.\n                if (!props.debug) {\n                    store.pendingRequests.cancelAll();\n                }\n            }\n        }\n        return _objectSpread({\n            // We do not rely on the native `blur` event of the input to close the\n            // panel, but rather on a custom `touchstart`/`mousedown` event outside\n            // of the autocomplete elements.\n            // This ensures we don't mistakenly interpret interactions within the\n            // autocomplete (but outside of the input) as a signal to close the panel.\n            // For example, clicking reset button causes an input blur, but if\n            // `openOnFocus=true`, it shouldn't close the panel.\n            // On touch devices, scrolling results (`touchmove`) causes an input blur\n            // but shouldn't close the panel.\n            onTouchStart: onMouseDownOrTouchStart,\n            onMouseDown: onMouseDownOrTouchStart,\n            // When scrolling on touch devices (mobiles, tablets, etc.), we want to\n            // mimic the native platform behavior where the input is blurred to\n            // hide the virtual keyboard. This gives more vertical space to\n            // discover all the suggestions showing up in the panel.\n            onTouchMove: function onTouchMove(event) {\n                if (store.getState().isOpen === false || inputElement !== props.environment.document.activeElement || event.target === inputElement) {\n                    return;\n                }\n                inputElement.blur();\n            }\n        }, rest);\n    };\n    var getRootProps = function getRootProps(rest) {\n        return _objectSpread({\n            role: \"combobox\",\n            \"aria-expanded\": store.getState().isOpen,\n            \"aria-haspopup\": \"listbox\",\n            \"aria-owns\": store.getState().isOpen ? \"\".concat(props.id, \"-list\") : undefined,\n            \"aria-labelledby\": \"\".concat(props.id, \"-label\")\n        }, rest);\n    };\n    var getFormProps = function getFormProps(providedProps) {\n        var inputElement = providedProps.inputElement, rest = _objectWithoutProperties(providedProps, _excluded3);\n        return _objectSpread({\n            action: \"\",\n            noValidate: true,\n            role: \"search\",\n            onSubmit: function onSubmit(event) {\n                var _providedProps$inputE;\n                event.preventDefault();\n                props.onSubmit(_objectSpread({\n                    event: event,\n                    refresh: refresh,\n                    state: store.getState()\n                }, setters));\n                store.dispatch(\"submit\", null);\n                (_providedProps$inputE = providedProps.inputElement) === null || _providedProps$inputE === void 0 ? void 0 : _providedProps$inputE.blur();\n            },\n            onReset: function onReset(event) {\n                var _providedProps$inputE2;\n                event.preventDefault();\n                props.onReset(_objectSpread({\n                    event: event,\n                    refresh: refresh,\n                    state: store.getState()\n                }, setters));\n                store.dispatch(\"reset\", null);\n                (_providedProps$inputE2 = providedProps.inputElement) === null || _providedProps$inputE2 === void 0 ? void 0 : _providedProps$inputE2.focus();\n            }\n        }, rest);\n    };\n    var getInputProps = function getInputProps(providedProps) {\n        var _props$environment$na;\n        function onFocus(event) {\n            // We want to trigger a query when `openOnFocus` is true\n            // because the panel should open with the current query.\n            if (props.openOnFocus || Boolean(store.getState().query)) {\n                (0,_onInput__WEBPACK_IMPORTED_MODULE_1__.onInput)(_objectSpread({\n                    event: event,\n                    props: props,\n                    query: store.getState().completion || store.getState().query,\n                    refresh: refresh,\n                    store: store\n                }, setters));\n            }\n            store.dispatch(\"focus\", null);\n        }\n        var _ref2 = providedProps || {}, inputElement = _ref2.inputElement, _ref2$maxLength = _ref2.maxLength, maxLength = _ref2$maxLength === void 0 ? 512 : _ref2$maxLength, rest = _objectWithoutProperties(_ref2, _excluded4);\n        var activeItem = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getActiveItem)(store.getState());\n        var userAgent = ((_props$environment$na = props.environment.navigator) === null || _props$environment$na === void 0 ? void 0 : _props$environment$na.userAgent) || \"\";\n        var shouldFallbackKeyHint = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.isSamsung)(userAgent);\n        var enterKeyHint = activeItem !== null && activeItem !== void 0 && activeItem.itemUrl && !shouldFallbackKeyHint ? \"go\" : \"search\";\n        return _objectSpread({\n            \"aria-autocomplete\": \"both\",\n            \"aria-activedescendant\": store.getState().isOpen && store.getState().activeItemId !== null ? \"\".concat(props.id, \"-item-\").concat(store.getState().activeItemId) : undefined,\n            \"aria-controls\": store.getState().isOpen ? \"\".concat(props.id, \"-list\") : undefined,\n            \"aria-labelledby\": \"\".concat(props.id, \"-label\"),\n            value: store.getState().completion || store.getState().query,\n            id: \"\".concat(props.id, \"-input\"),\n            autoComplete: \"off\",\n            autoCorrect: \"off\",\n            autoCapitalize: \"off\",\n            enterKeyHint: enterKeyHint,\n            spellCheck: \"false\",\n            autoFocus: props.autoFocus,\n            placeholder: props.placeholder,\n            maxLength: maxLength,\n            type: \"search\",\n            onChange: function onChange(event) {\n                (0,_onInput__WEBPACK_IMPORTED_MODULE_1__.onInput)(_objectSpread({\n                    event: event,\n                    props: props,\n                    query: event.currentTarget.value.slice(0, maxLength),\n                    refresh: refresh,\n                    store: store\n                }, setters));\n            },\n            onKeyDown: function onKeyDown(event) {\n                (0,_onKeyDown__WEBPACK_IMPORTED_MODULE_4__.onKeyDown)(_objectSpread({\n                    event: event,\n                    props: props,\n                    refresh: refresh,\n                    store: store\n                }, setters));\n            },\n            onFocus: onFocus,\n            // We don't rely on the `blur` event.\n            // See explanation in `onTouchStart`/`onMouseDown`.\n            // @MAJOR See if we need to keep this handler.\n            onBlur: _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_5__.noop,\n            onClick: function onClick(event) {\n                // When the panel is closed and you click on the input while\n                // the input is focused, the `onFocus` event is not triggered\n                // (default browser behavior).\n                // In an autocomplete context, it makes sense to open the panel in this\n                // case.\n                // We mimic this event by catching the `onClick` event which\n                // triggers the `onFocus` for the panel to open.\n                if (providedProps.inputElement === props.environment.document.activeElement && !store.getState().isOpen) {\n                    onFocus(event);\n                }\n            }\n        }, rest);\n    };\n    var getAutocompleteId = function getAutocompleteId(instanceId, sourceId) {\n        return typeof sourceId !== \"undefined\" ? \"\".concat(instanceId, \"-\").concat(sourceId) : instanceId;\n    };\n    var getLabelProps = function getLabelProps(providedProps) {\n        var _ref3 = providedProps || {}, sourceIndex = _ref3.sourceIndex, rest = _objectWithoutProperties(_ref3, _excluded5);\n        return _objectSpread({\n            htmlFor: \"\".concat(getAutocompleteId(props.id, sourceIndex), \"-input\"),\n            id: \"\".concat(getAutocompleteId(props.id, sourceIndex), \"-label\")\n        }, rest);\n    };\n    var getListProps = function getListProps(providedProps) {\n        var _ref4 = providedProps || {}, sourceIndex = _ref4.sourceIndex, rest = _objectWithoutProperties(_ref4, _excluded6);\n        return _objectSpread({\n            role: \"listbox\",\n            \"aria-labelledby\": \"\".concat(getAutocompleteId(props.id, sourceIndex), \"-label\"),\n            id: \"\".concat(getAutocompleteId(props.id, sourceIndex), \"-list\")\n        }, rest);\n    };\n    var getPanelProps = function getPanelProps(rest) {\n        return _objectSpread({\n            onMouseDown: function onMouseDown(event) {\n                // Prevents the `activeElement` from being changed to the panel so\n                // that the blur event is not triggered, otherwise it closes the\n                // panel.\n                event.preventDefault();\n            },\n            onMouseLeave: function onMouseLeave() {\n                store.dispatch(\"mouseleave\", null);\n            }\n        }, rest);\n    };\n    var getItemProps = function getItemProps(providedProps) {\n        var item = providedProps.item, source = providedProps.source, sourceIndex = providedProps.sourceIndex, rest = _objectWithoutProperties(providedProps, _excluded7);\n        return _objectSpread({\n            id: \"\".concat(getAutocompleteId(props.id, sourceIndex), \"-item-\").concat(item.__autocomplete_id),\n            role: \"option\",\n            \"aria-selected\": store.getState().activeItemId === item.__autocomplete_id,\n            onMouseMove: function onMouseMove(event) {\n                if (item.__autocomplete_id === store.getState().activeItemId) {\n                    return;\n                }\n                store.dispatch(\"mousemove\", item.__autocomplete_id);\n                var activeItem = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getActiveItem)(store.getState());\n                if (store.getState().activeItemId !== null && activeItem) {\n                    var _item = activeItem.item, itemInputValue = activeItem.itemInputValue, itemUrl = activeItem.itemUrl, _source = activeItem.source;\n                    _source.onActive(_objectSpread({\n                        event: event,\n                        item: _item,\n                        itemInputValue: itemInputValue,\n                        itemUrl: itemUrl,\n                        refresh: refresh,\n                        source: _source,\n                        state: store.getState()\n                    }, setters));\n                }\n            },\n            onMouseDown: function onMouseDown(event) {\n                // Prevents the `activeElement` from being changed to the item so it\n                // can remain with the current `activeElement`.\n                event.preventDefault();\n            },\n            onClick: function onClick(event) {\n                var itemInputValue = source.getItemInputValue({\n                    item: item,\n                    state: store.getState()\n                });\n                var itemUrl = source.getItemUrl({\n                    item: item,\n                    state: store.getState()\n                });\n                // If `getItemUrl` is provided, it means that the suggestion\n                // is a link, not plain text that aims at updating the query.\n                // We can therefore skip the state change because it will update\n                // the `activeItemId`, resulting in a UI flash, especially\n                // noticeable on mobile.\n                var runPreCommand = itemUrl ? Promise.resolve() : (0,_onInput__WEBPACK_IMPORTED_MODULE_1__.onInput)(_objectSpread({\n                    event: event,\n                    nextState: {\n                        isOpen: false\n                    },\n                    props: props,\n                    query: itemInputValue,\n                    refresh: refresh,\n                    store: store\n                }, setters));\n                runPreCommand.then(function() {\n                    source.onSelect(_objectSpread({\n                        event: event,\n                        item: item,\n                        itemInputValue: itemInputValue,\n                        itemUrl: itemUrl,\n                        refresh: refresh,\n                        source: source,\n                        state: store.getState()\n                    }, setters));\n                });\n            }\n        }, rest);\n    };\n    return {\n        getEnvironmentProps: getEnvironmentProps,\n        getRootProps: getRootProps,\n        getFormProps: getFormProps,\n        getLabelProps: getLabelProps,\n        getInputProps: getInputProps,\n        getPanelProps: getPanelProps,\n        getListProps: getListProps,\n        getItemProps: getItemProps\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getPropGetters.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/metadata.js":
/*!****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/metadata.js ***!
  \****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMetadata: () => (/* binding */ getMetadata),\n/* harmony export */   injectMetadata: () => (/* binding */ injectMetadata)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/userAgents.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction getMetadata(_ref) {\n    var _, _options$__autocomple, _options$__autocomple2, _options$__autocomple3;\n    var plugins = _ref.plugins, options = _ref.options;\n    var optionsKey = (_ = (((_options$__autocomple = options.__autocomplete_metadata) === null || _options$__autocomple === void 0 ? void 0 : _options$__autocomple.userAgents) || [])[0]) === null || _ === void 0 ? void 0 : _.segment;\n    var extraOptions = optionsKey ? _defineProperty({}, optionsKey, Object.keys(((_options$__autocomple2 = options.__autocomplete_metadata) === null || _options$__autocomple2 === void 0 ? void 0 : _options$__autocomple2.options) || {})) : {};\n    return {\n        plugins: plugins.map(function(plugin) {\n            return {\n                name: plugin.name,\n                options: Object.keys(plugin.__autocomplete_pluginOptions || [])\n            };\n        }),\n        options: _objectSpread({\n            \"autocomplete-core\": Object.keys(options)\n        }, extraOptions),\n        ua: _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.userAgents.concat(((_options$__autocomple3 = options.__autocomplete_metadata) === null || _options$__autocomple3 === void 0 ? void 0 : _options$__autocomple3.userAgents) || [])\n    };\n}\nfunction injectMetadata(_ref3) {\n    var _environment$navigato, _environment$navigato2;\n    var metadata = _ref3.metadata, environment = _ref3.environment;\n    var isMetadataEnabled = (_environment$navigato = environment.navigator) === null || _environment$navigato === void 0 ? void 0 : (_environment$navigato2 = _environment$navigato.userAgent) === null || _environment$navigato2 === void 0 ? void 0 : _environment$navigato2.includes(\"Algolia Crawler\");\n    if (isMetadataEnabled) {\n        var metadataContainer = environment.document.createElement(\"meta\");\n        var headRef = environment.document.querySelector(\"head\");\n        metadataContainer.name = \"algolia:metadata\";\n        setTimeout(function() {\n            metadataContainer.content = JSON.stringify(metadata);\n            headRef.appendChild(metadataContainer);\n        }, 0);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/metadata.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onInput.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onInput.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onInput: () => (/* binding */ onInput)\n/* harmony export */ });\n/* harmony import */ var _reshape__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./reshape */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/reshape.js\");\n/* harmony import */ var _resolve__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./resolve */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/resolve.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createConcurrentSafePromise.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromise.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"event\",\n    \"nextState\",\n    \"props\",\n    \"query\",\n    \"refresh\",\n    \"store\"\n];\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n\nvar lastStalledId = null;\nvar runConcurrentSafePromise = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.createConcurrentSafePromise)();\nfunction onInput(_ref) {\n    var event = _ref.event, _ref$nextState = _ref.nextState, nextState = _ref$nextState === void 0 ? {} : _ref$nextState, props = _ref.props, query = _ref.query, refresh = _ref.refresh, store = _ref.store, setters = _objectWithoutProperties(_ref, _excluded);\n    if (lastStalledId) {\n        props.environment.clearTimeout(lastStalledId);\n    }\n    var setCollections = setters.setCollections, setIsOpen = setters.setIsOpen, setQuery = setters.setQuery, setActiveItemId = setters.setActiveItemId, setStatus = setters.setStatus;\n    setQuery(query);\n    setActiveItemId(props.defaultActiveItemId);\n    if (!query && props.openOnFocus === false) {\n        var _nextState$isOpen;\n        var collections = store.getState().collections.map(function(collection) {\n            return _objectSpread(_objectSpread({}, collection), {}, {\n                items: []\n            });\n        });\n        setStatus(\"idle\");\n        setCollections(collections);\n        setIsOpen((_nextState$isOpen = nextState.isOpen) !== null && _nextState$isOpen !== void 0 ? _nextState$isOpen : props.shouldPanelOpen({\n            state: store.getState()\n        }));\n        // We make sure to update the latest resolved value of the tracked\n        // promises to keep late resolving promises from \"cancelling\" the state\n        // updates performed in this code path.\n        // We chain with a void promise to respect `onInput`'s expected return type.\n        var _request = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.cancelable)(runConcurrentSafePromise(collections).then(function() {\n            return Promise.resolve();\n        }));\n        return store.pendingRequests.add(_request);\n    }\n    setStatus(\"loading\");\n    lastStalledId = props.environment.setTimeout(function() {\n        setStatus(\"stalled\");\n    }, props.stallThreshold);\n    // We track the entire promise chain triggered by `onInput` before mutating\n    // the Autocomplete state to make sure that any state manipulation is based on\n    // fresh data regardless of when promises individually resolve.\n    // We don't track nested promises and only rely on the full chain resolution,\n    // meaning we should only ever manipulate the state once this concurrent-safe\n    // promise is resolved.\n    var request = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.cancelable)(runConcurrentSafePromise(props.getSources(_objectSpread({\n        query: query,\n        refresh: refresh,\n        state: store.getState()\n    }, setters)).then(function(sources) {\n        return Promise.all(sources.map(function(source) {\n            return Promise.resolve(source.getItems(_objectSpread({\n                query: query,\n                refresh: refresh,\n                state: store.getState()\n            }, setters))).then(function(itemsOrDescription) {\n                return (0,_resolve__WEBPACK_IMPORTED_MODULE_2__.preResolve)(itemsOrDescription, source.sourceId, store.getState());\n            });\n        })).then(_resolve__WEBPACK_IMPORTED_MODULE_2__.resolve).then(function(responses) {\n            return (0,_resolve__WEBPACK_IMPORTED_MODULE_2__.postResolve)(responses, sources, store);\n        }).then(function(collections) {\n            return (0,_reshape__WEBPACK_IMPORTED_MODULE_3__.reshape)({\n                collections: collections,\n                props: props,\n                state: store.getState()\n            });\n        });\n    }))).then(function(collections) {\n        var _nextState$isOpen2;\n        // Parameters passed to `onInput` could be stale when the following code\n        // executes, because `onInput` calls may not resolve in order.\n        // If it becomes a problem we'll need to save the last passed parameters.\n        // See: https://codesandbox.io/s/agitated-cookies-y290z\n        setStatus(\"idle\");\n        setCollections(collections);\n        var isPanelOpen = props.shouldPanelOpen({\n            state: store.getState()\n        });\n        setIsOpen((_nextState$isOpen2 = nextState.isOpen) !== null && _nextState$isOpen2 !== void 0 ? _nextState$isOpen2 : props.openOnFocus && !query && isPanelOpen || isPanelOpen);\n        var highlightedItem = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.getActiveItem)(store.getState());\n        if (store.getState().activeItemId !== null && highlightedItem) {\n            var item = highlightedItem.item, itemInputValue = highlightedItem.itemInputValue, itemUrl = highlightedItem.itemUrl, source = highlightedItem.source;\n            source.onActive(_objectSpread({\n                event: event,\n                item: item,\n                itemInputValue: itemInputValue,\n                itemUrl: itemUrl,\n                refresh: refresh,\n                source: source,\n                state: store.getState()\n            }, setters));\n        }\n    }).finally(function() {\n        setStatus(\"idle\");\n        if (lastStalledId) {\n            props.environment.clearTimeout(lastStalledId);\n        }\n    });\n    return store.pendingRequests.add(request);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onInput.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onKeyDown.js":
/*!*****************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onKeyDown.js ***!
  \*****************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   onKeyDown: () => (/* binding */ onKeyDown)\n/* harmony export */ });\n/* harmony import */ var _onInput__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./onInput */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onInput.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nvar _excluded = [\n    \"event\",\n    \"props\",\n    \"refresh\",\n    \"store\"\n];\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\nfunction onKeyDown(_ref) {\n    var event = _ref.event, props = _ref.props, refresh = _ref.refresh, store = _ref.store, setters = _objectWithoutProperties(_ref, _excluded);\n    if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n        // eslint-disable-next-line no-inner-declarations\n        var triggerScrollIntoView = function triggerScrollIntoView() {\n            var nodeItem = props.environment.document.getElementById(\"\".concat(props.id, \"-item-\").concat(store.getState().activeItemId));\n            if (nodeItem) {\n                if (nodeItem.scrollIntoViewIfNeeded) {\n                    nodeItem.scrollIntoViewIfNeeded(false);\n                } else {\n                    nodeItem.scrollIntoView(false);\n                }\n            }\n        }; // eslint-disable-next-line no-inner-declarations\n        var triggerOnActive = function triggerOnActive() {\n            var highlightedItem = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getActiveItem)(store.getState());\n            if (store.getState().activeItemId !== null && highlightedItem) {\n                var item = highlightedItem.item, itemInputValue = highlightedItem.itemInputValue, itemUrl = highlightedItem.itemUrl, source = highlightedItem.source;\n                source.onActive(_objectSpread({\n                    event: event,\n                    item: item,\n                    itemInputValue: itemInputValue,\n                    itemUrl: itemUrl,\n                    refresh: refresh,\n                    source: source,\n                    state: store.getState()\n                }, setters));\n            }\n        }; // Default browser behavior changes the caret placement on ArrowUp and\n        // ArrowDown.\n        event.preventDefault();\n        // When re-opening the panel, we need to split the logic to keep the actions\n        // synchronized as `onInput` returns a promise.\n        if (store.getState().isOpen === false && (props.openOnFocus || Boolean(store.getState().query))) {\n            (0,_onInput__WEBPACK_IMPORTED_MODULE_1__.onInput)(_objectSpread({\n                event: event,\n                props: props,\n                query: store.getState().query,\n                refresh: refresh,\n                store: store\n            }, setters)).then(function() {\n                store.dispatch(event.key, {\n                    nextActiveItemId: props.defaultActiveItemId\n                });\n                triggerOnActive();\n                // Since we rely on the DOM, we need to wait for all the micro tasks to\n                // finish (which include re-opening the panel) to make sure all the\n                // elements are available.\n                setTimeout(triggerScrollIntoView, 0);\n            });\n        } else {\n            store.dispatch(event.key, {});\n            triggerOnActive();\n            triggerScrollIntoView();\n        }\n    } else if (event.key === \"Escape\") {\n        // This prevents the default browser behavior on `input[type=\"search\"]`\n        // from removing the query right away because we first want to close the\n        // panel.\n        event.preventDefault();\n        store.dispatch(event.key, null);\n        // Hitting the `Escape` key signals the end of a user interaction with the\n        // autocomplete. At this point, we should ignore any requests that are still\n        // pending and could reopen the panel once they resolve, because that would\n        // result in an unsolicited UI behavior.\n        store.pendingRequests.cancelAll();\n    } else if (event.key === \"Tab\") {\n        store.dispatch(\"blur\", null);\n        // Hitting the `Escape` key signals the end of a user interaction with the\n        // autocomplete. At this point, we should ignore any requests that are still\n        // pending and could reopen the panel once they resolve, because that would\n        // result in an unsolicited UI behavior.\n        store.pendingRequests.cancelAll();\n    } else if (event.key === \"Enter\") {\n        // No active item, so we let the browser handle the native `onSubmit` form\n        // event.\n        if (store.getState().activeItemId === null || store.getState().collections.every(function(collection) {\n            return collection.items.length === 0;\n        })) {\n            // If requests are still pending when the panel closes, they could reopen\n            // the panel once they resolve.\n            // We want to prevent any subsequent query from reopening the panel\n            // because it would result in an unsolicited UI behavior.\n            if (!props.debug) {\n                store.pendingRequests.cancelAll();\n            }\n            return;\n        }\n        // This prevents the `onSubmit` event to be sent because an item is\n        // highlighted.\n        event.preventDefault();\n        var _ref2 = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getActiveItem)(store.getState()), item = _ref2.item, itemInputValue = _ref2.itemInputValue, itemUrl = _ref2.itemUrl, source = _ref2.source;\n        if (event.metaKey || event.ctrlKey) {\n            if (itemUrl !== undefined) {\n                source.onSelect(_objectSpread({\n                    event: event,\n                    item: item,\n                    itemInputValue: itemInputValue,\n                    itemUrl: itemUrl,\n                    refresh: refresh,\n                    source: source,\n                    state: store.getState()\n                }, setters));\n                props.navigator.navigateNewTab({\n                    itemUrl: itemUrl,\n                    item: item,\n                    state: store.getState()\n                });\n            }\n        } else if (event.shiftKey) {\n            if (itemUrl !== undefined) {\n                source.onSelect(_objectSpread({\n                    event: event,\n                    item: item,\n                    itemInputValue: itemInputValue,\n                    itemUrl: itemUrl,\n                    refresh: refresh,\n                    source: source,\n                    state: store.getState()\n                }, setters));\n                props.navigator.navigateNewWindow({\n                    itemUrl: itemUrl,\n                    item: item,\n                    state: store.getState()\n                });\n            }\n        } else if (event.altKey) {\n        // Keep native browser behavior\n        } else {\n            if (itemUrl !== undefined) {\n                source.onSelect(_objectSpread({\n                    event: event,\n                    item: item,\n                    itemInputValue: itemInputValue,\n                    itemUrl: itemUrl,\n                    refresh: refresh,\n                    source: source,\n                    state: store.getState()\n                }, setters));\n                props.navigator.navigate({\n                    itemUrl: itemUrl,\n                    item: item,\n                    state: store.getState()\n                });\n                return;\n            }\n            (0,_onInput__WEBPACK_IMPORTED_MODULE_1__.onInput)(_objectSpread({\n                event: event,\n                nextState: {\n                    isOpen: false\n                },\n                props: props,\n                query: itemInputValue,\n                refresh: refresh,\n                store: store\n            }, setters)).then(function() {\n                source.onSelect(_objectSpread({\n                    event: event,\n                    item: item,\n                    itemInputValue: itemInputValue,\n                    itemUrl: itemUrl,\n                    refresh: refresh,\n                    source: source,\n                    state: store.getState()\n                }, setters));\n            });\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/onKeyDown.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/reshape.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/reshape.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   reshape: () => (/* binding */ reshape)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/flatten.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction reshape(_ref) {\n    var collections = _ref.collections, props = _ref.props, state = _ref.state;\n    // Sources are grouped by `sourceId` to conveniently pick them via destructuring.\n    // Example: `const { recentSearchesPlugin } = sourcesBySourceId`\n    var originalSourcesBySourceId = collections.reduce(function(acc, collection) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, collection.source.sourceId, _objectSpread(_objectSpread({}, collection.source), {}, {\n            getItems: function getItems() {\n                // We provide the resolved items from the collection to the `reshape` prop.\n                return (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.flatten)(collection.items);\n            }\n        })));\n    }, {});\n    var _props$plugins$reduce = props.plugins.reduce(function(acc, plugin) {\n        if (plugin.reshape) {\n            return plugin.reshape(acc);\n        }\n        return acc;\n    }, {\n        sourcesBySourceId: originalSourcesBySourceId,\n        state: state\n    }), sourcesBySourceId = _props$plugins$reduce.sourcesBySourceId;\n    var reshapeSources = props.reshape({\n        sourcesBySourceId: sourcesBySourceId,\n        sources: Object.values(sourcesBySourceId),\n        state: state\n    });\n    // We reconstruct the collections with the items modified by the `reshape` prop.\n    return (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.flatten)(reshapeSources).filter(Boolean).map(function(source) {\n        return {\n            source: source,\n            items: source.getItems()\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vcmVzaGFwZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLFNBQVNBLFFBQVFDLEdBQUc7SUFBSTtJQUEyQixPQUFPRCxVQUFVLGNBQWMsT0FBT0UsVUFBVSxZQUFZLE9BQU9BLE9BQU9DLFFBQVEsR0FBRyxTQUFVRixHQUFHO1FBQUksT0FBTyxPQUFPQTtJQUFLLElBQUksU0FBVUEsR0FBRztRQUFJLE9BQU9BLE9BQU8sY0FBYyxPQUFPQyxVQUFVRCxJQUFJRyxXQUFXLEtBQUtGLFVBQVVELFFBQVFDLE9BQU9HLFNBQVMsR0FBRyxXQUFXLE9BQU9KO0lBQUssR0FBR0QsUUFBUUM7QUFBTTtBQUMvVSxTQUFTSyxRQUFRQyxNQUFNLEVBQUVDLGNBQWM7SUFBSSxJQUFJQyxPQUFPQyxPQUFPRCxJQUFJLENBQUNGO0lBQVMsSUFBSUcsT0FBT0MscUJBQXFCLEVBQUU7UUFBRSxJQUFJQyxVQUFVRixPQUFPQyxxQkFBcUIsQ0FBQ0o7UUFBU0Msa0JBQW1CSSxDQUFBQSxVQUFVQSxRQUFRQyxNQUFNLENBQUMsU0FBVUMsR0FBRztZQUFJLE9BQU9KLE9BQU9LLHdCQUF3QixDQUFDUixRQUFRTyxLQUFLRSxVQUFVO1FBQUUsRUFBQyxHQUFJUCxLQUFLUSxJQUFJLENBQUNDLEtBQUssQ0FBQ1QsTUFBTUc7SUFBVTtJQUFFLE9BQU9IO0FBQU07QUFDcFYsU0FBU1UsY0FBY0MsTUFBTTtJQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7UUFBRSxJQUFJRyxTQUFTLFFBQVFGLFNBQVMsQ0FBQ0QsRUFBRSxHQUFHQyxTQUFTLENBQUNELEVBQUUsR0FBRyxDQUFDO1FBQUdBLElBQUksSUFBSWYsUUFBUUksT0FBT2MsU0FBUyxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxTQUFVQyxHQUFHO1lBQUlDLGdCQUFnQlAsUUFBUU0sS0FBS0YsTUFBTSxDQUFDRSxJQUFJO1FBQUcsS0FBS2hCLE9BQU9rQix5QkFBeUIsR0FBR2xCLE9BQU9tQixnQkFBZ0IsQ0FBQ1QsUUFBUVYsT0FBT2tCLHlCQUF5QixDQUFDSixXQUFXbEIsUUFBUUksT0FBT2MsU0FBU0MsT0FBTyxDQUFDLFNBQVVDLEdBQUc7WUFBSWhCLE9BQU9vQixjQUFjLENBQUNWLFFBQVFNLEtBQUtoQixPQUFPSyx3QkFBd0IsQ0FBQ1MsUUFBUUU7UUFBTztJQUFJO0lBQUUsT0FBT047QUFBUTtBQUN6ZixTQUFTTyxnQkFBZ0IxQixHQUFHLEVBQUV5QixHQUFHLEVBQUVLLEtBQUs7SUFBSUwsTUFBTU0sZUFBZU47SUFBTSxJQUFJQSxPQUFPekIsS0FBSztRQUFFUyxPQUFPb0IsY0FBYyxDQUFDN0IsS0FBS3lCLEtBQUs7WUFBRUssT0FBT0E7WUFBT2YsWUFBWTtZQUFNaUIsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVqQyxHQUFHLENBQUN5QixJQUFJLEdBQUdLO0lBQU87SUFBRSxPQUFPOUI7QUFBSztBQUMzTyxTQUFTK0IsZUFBZUcsR0FBRztJQUFJLElBQUlULE1BQU1VLGFBQWFELEtBQUs7SUFBVyxPQUFPbkMsUUFBUTBCLFNBQVMsV0FBV0EsTUFBTVcsT0FBT1g7QUFBTTtBQUM1SCxTQUFTVSxhQUFhRSxLQUFLLEVBQUVDLElBQUk7SUFBSSxJQUFJdkMsUUFBUXNDLFdBQVcsWUFBWUEsVUFBVSxNQUFNLE9BQU9BO0lBQU8sSUFBSUUsT0FBT0YsS0FBSyxDQUFDcEMsT0FBT3VDLFdBQVcsQ0FBQztJQUFFLElBQUlELFNBQVNFLFdBQVc7UUFBRSxJQUFJQyxNQUFNSCxLQUFLSSxJQUFJLENBQUNOLE9BQU9DLFFBQVE7UUFBWSxJQUFJdkMsUUFBUTJDLFNBQVMsVUFBVSxPQUFPQTtRQUFLLE1BQU0sSUFBSUUsVUFBVTtJQUFpRDtJQUFFLE9BQU8sQ0FBQ04sU0FBUyxXQUFXRixTQUFTUyxNQUFLLEVBQUdSO0FBQVE7QUFDclU7QUFDaEQsU0FBU1UsUUFBUUMsSUFBSTtJQUMxQixJQUFJQyxjQUFjRCxLQUFLQyxXQUFXLEVBQ2hDQyxRQUFRRixLQUFLRSxLQUFLLEVBQ2xCQyxRQUFRSCxLQUFLRyxLQUFLO0lBQ3BCLGlGQUFpRjtJQUNqRixnRUFBZ0U7SUFDaEUsSUFBSUMsNEJBQTRCSCxZQUFZSSxNQUFNLENBQUMsU0FBVUMsR0FBRyxFQUFFQyxVQUFVO1FBQzFFLE9BQU9yQyxjQUFjQSxjQUFjLENBQUMsR0FBR29DLE1BQU0sQ0FBQyxHQUFHNUIsZ0JBQWdCLENBQUMsR0FBRzZCLFdBQVdoQyxNQUFNLENBQUNpQyxRQUFRLEVBQUV0QyxjQUFjQSxjQUFjLENBQUMsR0FBR3FDLFdBQVdoQyxNQUFNLEdBQUcsQ0FBQyxHQUFHO1lBQ3ZKa0MsVUFBVSxTQUFTQTtnQkFDakIsMkVBQTJFO2dCQUMzRSxPQUFPWCxxRUFBT0EsQ0FBQ1MsV0FBV0csS0FBSztZQUNqQztRQUNGO0lBQ0YsR0FBRyxDQUFDO0lBQ0osSUFBSUMsd0JBQXdCVCxNQUFNVSxPQUFPLENBQUNQLE1BQU0sQ0FBQyxTQUFVQyxHQUFHLEVBQUVPLE1BQU07UUFDbEUsSUFBSUEsT0FBT2QsT0FBTyxFQUFFO1lBQ2xCLE9BQU9jLE9BQU9kLE9BQU8sQ0FBQ087UUFDeEI7UUFDQSxPQUFPQTtJQUNULEdBQUc7UUFDRFEsbUJBQW1CVjtRQUNuQkQsT0FBT0E7SUFDVCxJQUNBVyxvQkFBb0JILHNCQUFzQkcsaUJBQWlCO0lBQzdELElBQUlDLGlCQUFpQmIsTUFBTUgsT0FBTyxDQUFDO1FBQ2pDZSxtQkFBbUJBO1FBQ25CRSxTQUFTdkQsT0FBT3dELE1BQU0sQ0FBQ0g7UUFDdkJYLE9BQU9BO0lBQ1Q7SUFFQSxnRkFBZ0Y7SUFDaEYsT0FBT0wscUVBQU9BLENBQUNpQixnQkFBZ0JuRCxNQUFNLENBQUNzRCxTQUFTQyxHQUFHLENBQUMsU0FBVTVDLE1BQU07UUFDakUsT0FBTztZQUNMQSxRQUFRQTtZQUNSbUMsT0FBT25DLE9BQU9rQyxRQUFRO1FBQ3hCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RhaWx3aW5kLW5leHRqcy1zdGFydGVyLWJsb2cvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vcmVzaGFwZS5qcz9mNjVlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cbmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgXCJzdHJpbmdcIik7IHJldHVybiBfdHlwZW9mKGtleSkgPT09IFwic3ltYm9sXCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfVxuZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmIChfdHlwZW9mKGlucHV0KSAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCBcImRlZmF1bHRcIik7IGlmIChfdHlwZW9mKHJlcykgIT09IFwib2JqZWN0XCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTsgfSByZXR1cm4gKGhpbnQgPT09IFwic3RyaW5nXCIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfVxuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJ0BhbGdvbGlhL2F1dG9jb21wbGV0ZS1zaGFyZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2hhcGUoX3JlZikge1xuICB2YXIgY29sbGVjdGlvbnMgPSBfcmVmLmNvbGxlY3Rpb25zLFxuICAgIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIC8vIFNvdXJjZXMgYXJlIGdyb3VwZWQgYnkgYHNvdXJjZUlkYCB0byBjb252ZW5pZW50bHkgcGljayB0aGVtIHZpYSBkZXN0cnVjdHVyaW5nLlxuICAvLyBFeGFtcGxlOiBgY29uc3QgeyByZWNlbnRTZWFyY2hlc1BsdWdpbiB9ID0gc291cmNlc0J5U291cmNlSWRgXG4gIHZhciBvcmlnaW5hbFNvdXJjZXNCeVNvdXJjZUlkID0gY29sbGVjdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBhY2MpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBjb2xsZWN0aW9uLnNvdXJjZS5zb3VyY2VJZCwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb2xsZWN0aW9uLnNvdXJjZSksIHt9LCB7XG4gICAgICBnZXRJdGVtczogZnVuY3Rpb24gZ2V0SXRlbXMoKSB7XG4gICAgICAgIC8vIFdlIHByb3ZpZGUgdGhlIHJlc29sdmVkIGl0ZW1zIGZyb20gdGhlIGNvbGxlY3Rpb24gdG8gdGhlIGByZXNoYXBlYCBwcm9wLlxuICAgICAgICByZXR1cm4gZmxhdHRlbihjb2xsZWN0aW9uLml0ZW1zKTtcbiAgICAgIH1cbiAgICB9KSkpO1xuICB9LCB7fSk7XG4gIHZhciBfcHJvcHMkcGx1Z2lucyRyZWR1Y2UgPSBwcm9wcy5wbHVnaW5zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbHVnaW4pIHtcbiAgICAgIGlmIChwbHVnaW4ucmVzaGFwZSkge1xuICAgICAgICByZXR1cm4gcGx1Z2luLnJlc2hhcGUoYWNjKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge1xuICAgICAgc291cmNlc0J5U291cmNlSWQ6IG9yaWdpbmFsU291cmNlc0J5U291cmNlSWQsXG4gICAgICBzdGF0ZTogc3RhdGVcbiAgICB9KSxcbiAgICBzb3VyY2VzQnlTb3VyY2VJZCA9IF9wcm9wcyRwbHVnaW5zJHJlZHVjZS5zb3VyY2VzQnlTb3VyY2VJZDtcbiAgdmFyIHJlc2hhcGVTb3VyY2VzID0gcHJvcHMucmVzaGFwZSh7XG4gICAgc291cmNlc0J5U291cmNlSWQ6IHNvdXJjZXNCeVNvdXJjZUlkLFxuICAgIHNvdXJjZXM6IE9iamVjdC52YWx1ZXMoc291cmNlc0J5U291cmNlSWQpLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KTtcblxuICAvLyBXZSByZWNvbnN0cnVjdCB0aGUgY29sbGVjdGlvbnMgd2l0aCB0aGUgaXRlbXMgbW9kaWZpZWQgYnkgdGhlIGByZXNoYXBlYCBwcm9wLlxuICByZXR1cm4gZmxhdHRlbihyZXNoYXBlU291cmNlcykuZmlsdGVyKEJvb2xlYW4pLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgaXRlbXM6IHNvdXJjZS5nZXRJdGVtcygpXG4gICAgfTtcbiAgfSk7XG59Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJmbGF0dGVuIiwicmVzaGFwZSIsIl9yZWYiLCJjb2xsZWN0aW9ucyIsInByb3BzIiwic3RhdGUiLCJvcmlnaW5hbFNvdXJjZXNCeVNvdXJjZUlkIiwicmVkdWNlIiwiYWNjIiwiY29sbGVjdGlvbiIsInNvdXJjZUlkIiwiZ2V0SXRlbXMiLCJpdGVtcyIsIl9wcm9wcyRwbHVnaW5zJHJlZHVjZSIsInBsdWdpbnMiLCJwbHVnaW4iLCJzb3VyY2VzQnlTb3VyY2VJZCIsInJlc2hhcGVTb3VyY2VzIiwic291cmNlcyIsInZhbHVlcyIsIkJvb2xlYW4iLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/reshape.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/resolve.js":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/resolve.js ***!
  \***************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   postResolve: () => (/* binding */ postResolve),\n/* harmony export */   preResolve: () => (/* binding */ preResolve),\n/* harmony export */   resolve: () => (/* binding */ resolve)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/flatten.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/invariant.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/decycle.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/mapToAlgoliaResponse.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction isDescription(item) {\n    return Boolean(item.execute);\n}\nfunction isRequesterDescription(description) {\n    return Boolean(description === null || description === void 0 ? void 0 : description.execute);\n}\nfunction preResolve(itemsOrDescription, sourceId, state) {\n    if (isRequesterDescription(itemsOrDescription)) {\n        var contextParameters = itemsOrDescription.requesterId === \"algolia\" ? Object.assign.apply(Object, [\n            {}\n        ].concat(_toConsumableArray(Object.keys(state.context).map(function(key) {\n            var _state$context$key;\n            return (_state$context$key = state.context[key]) === null || _state$context$key === void 0 ? void 0 : _state$context$key.__algoliaSearchParameters;\n        })))) : {};\n        return _objectSpread(_objectSpread({}, itemsOrDescription), {}, {\n            requests: itemsOrDescription.queries.map(function(query) {\n                return {\n                    query: itemsOrDescription.requesterId === \"algolia\" ? _objectSpread(_objectSpread({}, query), {}, {\n                        params: _objectSpread(_objectSpread({}, contextParameters), query.params)\n                    }) : query,\n                    sourceId: sourceId,\n                    transformResponse: itemsOrDescription.transformResponse\n                };\n            })\n        });\n    }\n    return {\n        items: itemsOrDescription,\n        sourceId: sourceId\n    };\n}\nfunction resolve(items) {\n    var packed = items.reduce(function(acc, current) {\n        if (!isDescription(current)) {\n            acc.push(current);\n            return acc;\n        }\n        var searchClient = current.searchClient, execute = current.execute, requesterId = current.requesterId, requests = current.requests;\n        var container = acc.find(function(item) {\n            return isDescription(current) && isDescription(item) && item.searchClient === searchClient && Boolean(requesterId) && item.requesterId === requesterId;\n        });\n        if (container) {\n            var _container$items;\n            (_container$items = container.items).push.apply(_container$items, _toConsumableArray(requests));\n        } else {\n            var request = {\n                execute: execute,\n                requesterId: requesterId,\n                items: requests,\n                searchClient: searchClient\n            };\n            acc.push(request);\n        }\n        return acc;\n    }, []);\n    var values = packed.map(function(maybeDescription) {\n        if (!isDescription(maybeDescription)) {\n            return Promise.resolve(maybeDescription);\n        }\n        var _ref = maybeDescription, execute = _ref.execute, items = _ref.items, searchClient = _ref.searchClient;\n        return execute({\n            searchClient: searchClient,\n            requests: items\n        });\n    });\n    return Promise.all(values).then(function(responses) {\n        return (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.flatten)(responses);\n    });\n}\nfunction postResolve(responses, sources, store) {\n    return sources.map(function(source) {\n        var matches = responses.filter(function(response) {\n            return response.sourceId === source.sourceId;\n        });\n        var results = matches.map(function(_ref2) {\n            var items = _ref2.items;\n            return items;\n        });\n        var transform = matches[0].transformResponse;\n        var items = transform ? transform((0,_utils__WEBPACK_IMPORTED_MODULE_1__.mapToAlgoliaResponse)(results)) : results;\n        source.onResolve({\n            source: source,\n            results: results,\n            items: items,\n            state: store.getState()\n        });\n        (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__.invariant)(Array.isArray(items), function() {\n            return 'The `getItems` function from source \"'.concat(source.sourceId, '\" must return an array of items but returned type ').concat(JSON.stringify(_typeof(items)), \":\\n\\n\").concat(JSON.stringify((0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_3__.decycle)(items), null, 2), \".\\n\\nSee: https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/sources/#param-getitems\");\n        });\n        (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__.invariant)(items.every(Boolean), 'The `getItems` function from source \"'.concat(source.sourceId, '\" must return an array of items but returned ').concat(JSON.stringify(undefined), \".\\n\\nDid you forget to return items?\\n\\nSee: https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/sources/#param-getitems\"));\n        return {\n            source: source,\n            items: items\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/resolve.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/stateReducer.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/stateReducer.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stateReducer: () => (/* binding */ stateReducer)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/getItemsCount.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/invariant.js\");\n/* harmony import */ var _getCompletion__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getCompletion */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/getCompletion.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNextActiveItemId.js\");\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\n\n\nvar stateReducer = function stateReducer(state, action) {\n    switch(action.type){\n        case \"setActiveItemId\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: action.payload\n                });\n            }\n        case \"setQuery\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    query: action.payload,\n                    completion: null\n                });\n            }\n        case \"setCollections\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    collections: action.payload\n                });\n            }\n        case \"setIsOpen\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    isOpen: action.payload\n                });\n            }\n        case \"setStatus\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    status: action.payload\n                });\n            }\n        case \"setContext\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    context: _objectSpread(_objectSpread({}, state.context), action.payload)\n                });\n            }\n        case \"ArrowDown\":\n            {\n                var nextState = _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: action.payload.hasOwnProperty(\"nextActiveItemId\") ? action.payload.nextActiveItemId : (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getNextActiveItemId)(1, state.activeItemId, (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__.getItemsCount)(state), action.props.defaultActiveItemId)\n                });\n                return _objectSpread(_objectSpread({}, nextState), {}, {\n                    completion: (0,_getCompletion__WEBPACK_IMPORTED_MODULE_2__.getCompletion)({\n                        state: nextState\n                    })\n                });\n            }\n        case \"ArrowUp\":\n            {\n                var _nextState = _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getNextActiveItemId)(-1, state.activeItemId, (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__.getItemsCount)(state), action.props.defaultActiveItemId)\n                });\n                return _objectSpread(_objectSpread({}, _nextState), {}, {\n                    completion: (0,_getCompletion__WEBPACK_IMPORTED_MODULE_2__.getCompletion)({\n                        state: _nextState\n                    })\n                });\n            }\n        case \"Escape\":\n            {\n                if (state.isOpen) {\n                    return _objectSpread(_objectSpread({}, state), {}, {\n                        activeItemId: null,\n                        isOpen: false,\n                        completion: null\n                    });\n                }\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: null,\n                    query: \"\",\n                    status: \"idle\",\n                    collections: []\n                });\n            }\n        case \"submit\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: null,\n                    isOpen: false,\n                    status: \"idle\"\n                });\n            }\n        case \"reset\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: // Since we open the panel on reset when openOnFocus=true\n                    // we need to restore the highlighted index to the defaultActiveItemId. (DocSearch use-case)\n                    // Since we close the panel when openOnFocus=false\n                    // we lose track of the highlighted index. (Query-suggestions use-case)\n                    action.props.openOnFocus === true ? action.props.defaultActiveItemId : null,\n                    status: \"idle\",\n                    query: \"\"\n                });\n            }\n        case \"focus\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: action.props.defaultActiveItemId,\n                    isOpen: (action.props.openOnFocus || Boolean(state.query)) && action.props.shouldPanelOpen({\n                        state: state\n                    })\n                });\n            }\n        case \"blur\":\n            {\n                if (action.props.debug) {\n                    return state;\n                }\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    isOpen: false,\n                    activeItemId: null\n                });\n            }\n        case \"mousemove\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: action.payload\n                });\n            }\n        case \"mouseleave\":\n            {\n                return _objectSpread(_objectSpread({}, state), {}, {\n                    activeItemId: action.props.defaultActiveItemId\n                });\n            }\n        default:\n            (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_3__.invariant)(false, \"The reducer action \".concat(JSON.stringify(action.type), \" is not supported.\"));\n            return state;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/stateReducer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromise.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromise.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelable: () => (/* binding */ cancelable),\n/* harmony export */   createCancelablePromise: () => (/* binding */ createCancelablePromise)\n/* harmony export */ });\nfunction createInternalCancelablePromise(promise, initialState) {\n    var state = initialState;\n    return {\n        then: function then(onfulfilled, onrejected) {\n            return createInternalCancelablePromise(promise.then(createCallback(onfulfilled, state, promise), createCallback(onrejected, state, promise)), state);\n        },\n        catch: function _catch(onrejected) {\n            return createInternalCancelablePromise(promise.catch(createCallback(onrejected, state, promise)), state);\n        },\n        finally: function _finally(onfinally) {\n            if (onfinally) {\n                state.onCancelList.push(onfinally);\n            }\n            return createInternalCancelablePromise(promise.finally(createCallback(onfinally && function() {\n                state.onCancelList = [];\n                return onfinally();\n            }, state, promise)), state);\n        },\n        cancel: function cancel() {\n            state.isCanceled = true;\n            var callbacks = state.onCancelList;\n            state.onCancelList = [];\n            callbacks.forEach(function(callback) {\n                callback();\n            });\n        },\n        isCanceled: function isCanceled() {\n            return state.isCanceled === true;\n        }\n    };\n}\nfunction createCancelablePromise(executor) {\n    return createInternalCancelablePromise(new Promise(function(resolve, reject) {\n        return executor(resolve, reject);\n    }), {\n        isCanceled: false,\n        onCancelList: []\n    });\n}\ncreateCancelablePromise.resolve = function(value) {\n    return cancelable(Promise.resolve(value));\n};\ncreateCancelablePromise.reject = function(reason) {\n    return cancelable(Promise.reject(reason));\n};\nfunction cancelable(promise) {\n    return createInternalCancelablePromise(promise, {\n        isCanceled: false,\n        onCancelList: []\n    });\n}\nfunction createCallback(onResult, state, fallback) {\n    if (!onResult) {\n        return fallback;\n    }\n    return function callback(arg) {\n        if (state.isCanceled) {\n            return arg;\n        }\n        return onResult(arg);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvY3JlYXRlQ2FuY2VsYWJsZVByb21pc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxnQ0FBZ0NDLE9BQU8sRUFBRUMsWUFBWTtJQUM1RCxJQUFJQyxRQUFRRDtJQUNaLE9BQU87UUFDTEUsTUFBTSxTQUFTQSxLQUFLQyxXQUFXLEVBQUVDLFVBQVU7WUFDekMsT0FBT04sZ0NBQWdDQyxRQUFRRyxJQUFJLENBQUNHLGVBQWVGLGFBQWFGLE9BQU9GLFVBQVVNLGVBQWVELFlBQVlILE9BQU9GLFdBQVdFO1FBQ2hKO1FBQ0FLLE9BQU8sU0FBU0MsT0FBT0gsVUFBVTtZQUMvQixPQUFPTixnQ0FBZ0NDLFFBQVFPLEtBQUssQ0FBQ0QsZUFBZUQsWUFBWUgsT0FBT0YsV0FBV0U7UUFDcEc7UUFDQU8sU0FBUyxTQUFTQyxTQUFTQyxTQUFTO1lBQ2xDLElBQUlBLFdBQVc7Z0JBQ2JULE1BQU1VLFlBQVksQ0FBQ0MsSUFBSSxDQUFDRjtZQUMxQjtZQUNBLE9BQU9aLGdDQUFnQ0MsUUFBUVMsT0FBTyxDQUFDSCxlQUFlSyxhQUFhO2dCQUNqRlQsTUFBTVUsWUFBWSxHQUFHLEVBQUU7Z0JBQ3ZCLE9BQU9EO1lBQ1QsR0FBR1QsT0FBT0YsV0FBV0U7UUFDdkI7UUFDQVksUUFBUSxTQUFTQTtZQUNmWixNQUFNYSxVQUFVLEdBQUc7WUFDbkIsSUFBSUMsWUFBWWQsTUFBTVUsWUFBWTtZQUNsQ1YsTUFBTVUsWUFBWSxHQUFHLEVBQUU7WUFDdkJJLFVBQVVDLE9BQU8sQ0FBQyxTQUFVQyxRQUFRO2dCQUNsQ0E7WUFDRjtRQUNGO1FBQ0FILFlBQVksU0FBU0E7WUFDbkIsT0FBT2IsTUFBTWEsVUFBVSxLQUFLO1FBQzlCO0lBQ0Y7QUFDRjtBQUNPLFNBQVNJLHdCQUF3QkMsUUFBUTtJQUM5QyxPQUFPckIsZ0NBQWdDLElBQUlzQixRQUFRLFNBQVVDLE9BQU8sRUFBRUMsTUFBTTtRQUMxRSxPQUFPSCxTQUFTRSxTQUFTQztJQUMzQixJQUFJO1FBQ0ZSLFlBQVk7UUFDWkgsY0FBYyxFQUFFO0lBQ2xCO0FBQ0Y7QUFDQU8sd0JBQXdCRyxPQUFPLEdBQUcsU0FBVUUsS0FBSztJQUMvQyxPQUFPQyxXQUFXSixRQUFRQyxPQUFPLENBQUNFO0FBQ3BDO0FBQ0FMLHdCQUF3QkksTUFBTSxHQUFHLFNBQVVHLE1BQU07SUFDL0MsT0FBT0QsV0FBV0osUUFBUUUsTUFBTSxDQUFDRztBQUNuQztBQUNPLFNBQVNELFdBQVd6QixPQUFPO0lBQ2hDLE9BQU9ELGdDQUFnQ0MsU0FBUztRQUM5Q2UsWUFBWTtRQUNaSCxjQUFjLEVBQUU7SUFDbEI7QUFDRjtBQUNBLFNBQVNOLGVBQWVxQixRQUFRLEVBQUV6QixLQUFLLEVBQUUwQixRQUFRO0lBQy9DLElBQUksQ0FBQ0QsVUFBVTtRQUNiLE9BQU9DO0lBQ1Q7SUFDQSxPQUFPLFNBQVNWLFNBQVNXLEdBQUc7UUFDMUIsSUFBSTNCLE1BQU1hLFVBQVUsRUFBRTtZQUNwQixPQUFPYztRQUNUO1FBQ0EsT0FBT0YsU0FBU0U7SUFDbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RhaWx3aW5kLW5leHRqcy1zdGFydGVyLWJsb2cvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvY3JlYXRlQ2FuY2VsYWJsZVByb21pc2UuanM/YTAwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENhbmNlbGFibGVQcm9taXNlKHByb21pc2UsIGluaXRpYWxTdGF0ZSkge1xuICB2YXIgc3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIHJldHVybiB7XG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludGVybmFsQ2FuY2VsYWJsZVByb21pc2UocHJvbWlzZS50aGVuKGNyZWF0ZUNhbGxiYWNrKG9uZnVsZmlsbGVkLCBzdGF0ZSwgcHJvbWlzZSksIGNyZWF0ZUNhbGxiYWNrKG9ucmVqZWN0ZWQsIHN0YXRlLCBwcm9taXNlKSksIHN0YXRlKTtcbiAgICB9LFxuICAgIGNhdGNoOiBmdW5jdGlvbiBfY2F0Y2gob25yZWplY3RlZCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludGVybmFsQ2FuY2VsYWJsZVByb21pc2UocHJvbWlzZS5jYXRjaChjcmVhdGVDYWxsYmFjayhvbnJlamVjdGVkLCBzdGF0ZSwgcHJvbWlzZSkpLCBzdGF0ZSk7XG4gICAgfSxcbiAgICBmaW5hbGx5OiBmdW5jdGlvbiBfZmluYWxseShvbmZpbmFsbHkpIHtcbiAgICAgIGlmIChvbmZpbmFsbHkpIHtcbiAgICAgICAgc3RhdGUub25DYW5jZWxMaXN0LnB1c2gob25maW5hbGx5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVJbnRlcm5hbENhbmNlbGFibGVQcm9taXNlKHByb21pc2UuZmluYWxseShjcmVhdGVDYWxsYmFjayhvbmZpbmFsbHkgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICBzdGF0ZS5vbkNhbmNlbExpc3QgPSBbXTtcbiAgICAgICAgcmV0dXJuIG9uZmluYWxseSgpO1xuICAgICAgfSwgc3RhdGUsIHByb21pc2UpKSwgc3RhdGUpO1xuICAgIH0sXG4gICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgICBzdGF0ZS5pc0NhbmNlbGVkID0gdHJ1ZTtcbiAgICAgIHZhciBjYWxsYmFja3MgPSBzdGF0ZS5vbkNhbmNlbExpc3Q7XG4gICAgICBzdGF0ZS5vbkNhbmNlbExpc3QgPSBbXTtcbiAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBpc0NhbmNlbGVkOiBmdW5jdGlvbiBpc0NhbmNlbGVkKCkge1xuICAgICAgcmV0dXJuIHN0YXRlLmlzQ2FuY2VsZWQgPT09IHRydWU7XG4gICAgfVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhbmNlbGFibGVQcm9taXNlKGV4ZWN1dG9yKSB7XG4gIHJldHVybiBjcmVhdGVJbnRlcm5hbENhbmNlbGFibGVQcm9taXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICByZXR1cm4gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KTtcbiAgfSksIHtcbiAgICBpc0NhbmNlbGVkOiBmYWxzZSxcbiAgICBvbkNhbmNlbExpc3Q6IFtdXG4gIH0pO1xufVxuY3JlYXRlQ2FuY2VsYWJsZVByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gY2FuY2VsYWJsZShQcm9taXNlLnJlc29sdmUodmFsdWUpKTtcbn07XG5jcmVhdGVDYW5jZWxhYmxlUHJvbWlzZS5yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIHJldHVybiBjYW5jZWxhYmxlKFByb21pc2UucmVqZWN0KHJlYXNvbikpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxhYmxlKHByb21pc2UpIHtcbiAgcmV0dXJuIGNyZWF0ZUludGVybmFsQ2FuY2VsYWJsZVByb21pc2UocHJvbWlzZSwge1xuICAgIGlzQ2FuY2VsZWQ6IGZhbHNlLFxuICAgIG9uQ2FuY2VsTGlzdDogW11cbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVDYWxsYmFjayhvblJlc3VsdCwgc3RhdGUsIGZhbGxiYWNrKSB7XG4gIGlmICghb25SZXN1bHQpIHtcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIGNhbGxiYWNrKGFyZykge1xuICAgIGlmIChzdGF0ZS5pc0NhbmNlbGVkKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gb25SZXN1bHQoYXJnKTtcbiAgfTtcbn0iXSwibmFtZXMiOlsiY3JlYXRlSW50ZXJuYWxDYW5jZWxhYmxlUHJvbWlzZSIsInByb21pc2UiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsInRoZW4iLCJvbmZ1bGZpbGxlZCIsIm9ucmVqZWN0ZWQiLCJjcmVhdGVDYWxsYmFjayIsImNhdGNoIiwiX2NhdGNoIiwiZmluYWxseSIsIl9maW5hbGx5Iiwib25maW5hbGx5Iiwib25DYW5jZWxMaXN0IiwicHVzaCIsImNhbmNlbCIsImlzQ2FuY2VsZWQiLCJjYWxsYmFja3MiLCJmb3JFYWNoIiwiY2FsbGJhY2siLCJjcmVhdGVDYW5jZWxhYmxlUHJvbWlzZSIsImV4ZWN1dG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ2YWx1ZSIsImNhbmNlbGFibGUiLCJyZWFzb24iLCJvblJlc3VsdCIsImZhbGxiYWNrIiwiYXJnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromiseList.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromiseList.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCancelablePromiseList: () => (/* binding */ createCancelablePromiseList)\n/* harmony export */ });\nfunction createCancelablePromiseList() {\n    var list = [];\n    return {\n        add: function add(cancelablePromise) {\n            list.push(cancelablePromise);\n            return cancelablePromise.finally(function() {\n                list = list.filter(function(item) {\n                    return item !== cancelablePromise;\n                });\n            });\n        },\n        cancelAll: function cancelAll() {\n            list.forEach(function(promise) {\n                return promise.cancel();\n            });\n        },\n        isEmpty: function isEmpty() {\n            return list.length === 0;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvY3JlYXRlQ2FuY2VsYWJsZVByb21pc2VMaXN0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQTtJQUNkLElBQUlDLE9BQU8sRUFBRTtJQUNiLE9BQU87UUFDTEMsS0FBSyxTQUFTQSxJQUFJQyxpQkFBaUI7WUFDakNGLEtBQUtHLElBQUksQ0FBQ0Q7WUFDVixPQUFPQSxrQkFBa0JFLE9BQU8sQ0FBQztnQkFDL0JKLE9BQU9BLEtBQUtLLE1BQU0sQ0FBQyxTQUFVQyxJQUFJO29CQUMvQixPQUFPQSxTQUFTSjtnQkFDbEI7WUFDRjtRQUNGO1FBQ0FLLFdBQVcsU0FBU0E7WUFDbEJQLEtBQUtRLE9BQU8sQ0FBQyxTQUFVQyxPQUFPO2dCQUM1QixPQUFPQSxRQUFRQyxNQUFNO1lBQ3ZCO1FBQ0Y7UUFDQUMsU0FBUyxTQUFTQTtZQUNoQixPQUFPWCxLQUFLWSxNQUFNLEtBQUs7UUFDekI7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS91dGlscy9jcmVhdGVDYW5jZWxhYmxlUHJvbWlzZUxpc3QuanM/ZjI3OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FuY2VsYWJsZVByb21pc2VMaXN0KCkge1xuICB2YXIgbGlzdCA9IFtdO1xuICByZXR1cm4ge1xuICAgIGFkZDogZnVuY3Rpb24gYWRkKGNhbmNlbGFibGVQcm9taXNlKSB7XG4gICAgICBsaXN0LnB1c2goY2FuY2VsYWJsZVByb21pc2UpO1xuICAgICAgcmV0dXJuIGNhbmNlbGFibGVQcm9taXNlLmZpbmFsbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICBsaXN0ID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbSAhPT0gY2FuY2VsYWJsZVByb21pc2U7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjYW5jZWxBbGw6IGZ1bmN0aW9uIGNhbmNlbEFsbCgpIHtcbiAgICAgIGxpc3QuZm9yRWFjaChmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS5jYW5jZWwoKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBsaXN0Lmxlbmd0aCA9PT0gMDtcbiAgICB9XG4gIH07XG59Il0sIm5hbWVzIjpbImNyZWF0ZUNhbmNlbGFibGVQcm9taXNlTGlzdCIsImxpc3QiLCJhZGQiLCJjYW5jZWxhYmxlUHJvbWlzZSIsInB1c2giLCJmaW5hbGx5IiwiZmlsdGVyIiwiaXRlbSIsImNhbmNlbEFsbCIsImZvckVhY2giLCJwcm9taXNlIiwiY2FuY2VsIiwiaXNFbXB0eSIsImxlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createCancelablePromiseList.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createConcurrentSafePromise.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createConcurrentSafePromise.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createConcurrentSafePromise: () => (/* binding */ createConcurrentSafePromise)\n/* harmony export */ });\n/**\n * Creates a runner that executes promises in a concurrent-safe way.\n *\n * This is useful to prevent older promises to resolve after a newer promise,\n * otherwise resulting in stale resolved values.\n */ function createConcurrentSafePromise() {\n    var basePromiseId = -1;\n    var latestResolvedId = -1;\n    var latestResolvedValue = undefined;\n    return function runConcurrentSafePromise(promise) {\n        basePromiseId++;\n        var currentPromiseId = basePromiseId;\n        return Promise.resolve(promise).then(function(x) {\n            // The promise might take too long to resolve and get outdated. This would\n            // result in resolving stale values.\n            // When this happens, we ignore the promise value and return the one\n            // coming from the latest resolved value.\n            //\n            // +----------------------------------+\n            // |        100ms                     |\n            // | run(1) +--->  R1                 |\n            // |        300ms                     |\n            // | run(2) +-------------> R2 (SKIP) |\n            // |        200ms                     |\n            // | run(3) +--------> R3             |\n            // +----------------------------------+\n            if (latestResolvedValue && currentPromiseId < latestResolvedId) {\n                return latestResolvedValue;\n            }\n            latestResolvedId = currentPromiseId;\n            latestResolvedValue = x;\n            return x;\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvY3JlYXRlQ29uY3VycmVudFNhZmVQcm9taXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Q0FLQyxHQUNNLFNBQVNBO0lBQ2QsSUFBSUMsZ0JBQWdCLENBQUM7SUFDckIsSUFBSUMsbUJBQW1CLENBQUM7SUFDeEIsSUFBSUMsc0JBQXNCQztJQUMxQixPQUFPLFNBQVNDLHlCQUF5QkMsT0FBTztRQUM5Q0w7UUFDQSxJQUFJTSxtQkFBbUJOO1FBQ3ZCLE9BQU9PLFFBQVFDLE9BQU8sQ0FBQ0gsU0FBU0ksSUFBSSxDQUFDLFNBQVVDLENBQUM7WUFDOUMsMEVBQTBFO1lBQzFFLG9DQUFvQztZQUNwQyxvRUFBb0U7WUFDcEUseUNBQXlDO1lBQ3pDLEVBQUU7WUFDRix1Q0FBdUM7WUFDdkMsdUNBQXVDO1lBQ3ZDLHVDQUF1QztZQUN2Qyx1Q0FBdUM7WUFDdkMsdUNBQXVDO1lBQ3ZDLHVDQUF1QztZQUN2Qyx1Q0FBdUM7WUFDdkMsdUNBQXVDO1lBQ3ZDLElBQUlSLHVCQUF1QkksbUJBQW1CTCxrQkFBa0I7Z0JBQzlELE9BQU9DO1lBQ1Q7WUFDQUQsbUJBQW1CSztZQUNuQkosc0JBQXNCUTtZQUN0QixPQUFPQTtRQUNUO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3RhaWx3aW5kLW5leHRqcy1zdGFydGVyLWJsb2cvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvY3JlYXRlQ29uY3VycmVudFNhZmVQcm9taXNlLmpzPzY1OWIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVzIGEgcnVubmVyIHRoYXQgZXhlY3V0ZXMgcHJvbWlzZXMgaW4gYSBjb25jdXJyZW50LXNhZmUgd2F5LlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIHRvIHByZXZlbnQgb2xkZXIgcHJvbWlzZXMgdG8gcmVzb2x2ZSBhZnRlciBhIG5ld2VyIHByb21pc2UsXG4gKiBvdGhlcndpc2UgcmVzdWx0aW5nIGluIHN0YWxlIHJlc29sdmVkIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbmN1cnJlbnRTYWZlUHJvbWlzZSgpIHtcbiAgdmFyIGJhc2VQcm9taXNlSWQgPSAtMTtcbiAgdmFyIGxhdGVzdFJlc29sdmVkSWQgPSAtMTtcbiAgdmFyIGxhdGVzdFJlc29sdmVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gIHJldHVybiBmdW5jdGlvbiBydW5Db25jdXJyZW50U2FmZVByb21pc2UocHJvbWlzZSkge1xuICAgIGJhc2VQcm9taXNlSWQrKztcbiAgICB2YXIgY3VycmVudFByb21pc2VJZCA9IGJhc2VQcm9taXNlSWQ7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh4KSB7XG4gICAgICAvLyBUaGUgcHJvbWlzZSBtaWdodCB0YWtlIHRvbyBsb25nIHRvIHJlc29sdmUgYW5kIGdldCBvdXRkYXRlZC4gVGhpcyB3b3VsZFxuICAgICAgLy8gcmVzdWx0IGluIHJlc29sdmluZyBzdGFsZSB2YWx1ZXMuXG4gICAgICAvLyBXaGVuIHRoaXMgaGFwcGVucywgd2UgaWdub3JlIHRoZSBwcm9taXNlIHZhbHVlIGFuZCByZXR1cm4gdGhlIG9uZVxuICAgICAgLy8gY29taW5nIGZyb20gdGhlIGxhdGVzdCByZXNvbHZlZCB2YWx1ZS5cbiAgICAgIC8vXG4gICAgICAvLyArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLStcbiAgICAgIC8vIHwgICAgICAgIDEwMG1zICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgLy8gfCBydW4oMSkgKy0tLT4gIFIxICAgICAgICAgICAgICAgICB8XG4gICAgICAvLyB8ICAgICAgICAzMDBtcyAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgIC8vIHwgcnVuKDIpICstLS0tLS0tLS0tLS0tPiBSMiAoU0tJUCkgfFxuICAgICAgLy8gfCAgICAgICAgMjAwbXMgICAgICAgICAgICAgICAgICAgICB8XG4gICAgICAvLyB8IHJ1bigzKSArLS0tLS0tLS0+IFIzICAgICAgICAgICAgIHxcbiAgICAgIC8vICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICAgICAgaWYgKGxhdGVzdFJlc29sdmVkVmFsdWUgJiYgY3VycmVudFByb21pc2VJZCA8IGxhdGVzdFJlc29sdmVkSWQpIHtcbiAgICAgICAgcmV0dXJuIGxhdGVzdFJlc29sdmVkVmFsdWU7XG4gICAgICB9XG4gICAgICBsYXRlc3RSZXNvbHZlZElkID0gY3VycmVudFByb21pc2VJZDtcbiAgICAgIGxhdGVzdFJlc29sdmVkVmFsdWUgPSB4O1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSk7XG4gIH07XG59Il0sIm5hbWVzIjpbImNyZWF0ZUNvbmN1cnJlbnRTYWZlUHJvbWlzZSIsImJhc2VQcm9taXNlSWQiLCJsYXRlc3RSZXNvbHZlZElkIiwibGF0ZXN0UmVzb2x2ZWRWYWx1ZSIsInVuZGVmaW5lZCIsInJ1bkNvbmN1cnJlbnRTYWZlUHJvbWlzZSIsInByb21pc2UiLCJjdXJyZW50UHJvbWlzZUlkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwieCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/createConcurrentSafePromise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActiveItem: () => (/* binding */ getActiveItem)\n/* harmony export */ });\n// We don't have access to the autocomplete source when we call `onKeyDown`\n// or `onClick` because those are native browser events.\n// However, we can get the source from the suggestion index.\nfunction getCollectionFromActiveItemId(state) {\n    // Given 3 sources with respectively 1, 2 and 3 suggestions: [1, 2, 3]\n    // We want to get the accumulated counts:\n    // [1, 1 + 2, 1 + 2 + 3] = [1, 3, 3 + 3] = [1, 3, 6]\n    var accumulatedCollectionsCount = state.collections.map(function(collections) {\n        return collections.items.length;\n    }).reduce(function(acc, collectionsCount, index) {\n        var previousValue = acc[index - 1] || 0;\n        var nextValue = previousValue + collectionsCount;\n        acc.push(nextValue);\n        return acc;\n    }, []);\n    // Based on the accumulated counts, we can infer the index of the suggestion.\n    var collectionIndex = accumulatedCollectionsCount.reduce(function(acc, current) {\n        if (current <= state.activeItemId) {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n    return state.collections[collectionIndex];\n}\n/**\n * Gets the highlighted index relative to a suggestion object (not the absolute\n * highlighted index).\n *\n * Example:\n *  [['a', 'b'], ['c', 'd', 'e'], ['f']]\n *                      ↑\n *         (absolute: 3, relative: 1)\n */ function getRelativeActiveItemId(_ref) {\n    var state = _ref.state, collection = _ref.collection;\n    var isOffsetFound = false;\n    var counter = 0;\n    var previousItemsOffset = 0;\n    while(isOffsetFound === false){\n        var currentCollection = state.collections[counter];\n        if (currentCollection === collection) {\n            isOffsetFound = true;\n            break;\n        }\n        previousItemsOffset += currentCollection.items.length;\n        counter++;\n    }\n    return state.activeItemId - previousItemsOffset;\n}\nfunction getActiveItem(state) {\n    var collection = getCollectionFromActiveItemId(state);\n    if (!collection) {\n        return null;\n    }\n    var item = collection.items[getRelativeActiveItemId({\n        state: state,\n        collection: collection\n    })];\n    var source = collection.source;\n    var itemInputValue = source.getItemInputValue({\n        item: item,\n        state: state\n    });\n    var itemUrl = source.getItemUrl({\n        item: item,\n        state: state\n    });\n    return {\n        item: item,\n        itemInputValue: itemInputValue,\n        itemUrl: itemUrl,\n        source: source\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvZ2V0QWN0aXZlSXRlbS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsMkVBQTJFO0FBQzNFLHdEQUF3RDtBQUN4RCw0REFBNEQ7QUFDNUQsU0FBU0EsOEJBQThCQyxLQUFLO0lBQzFDLHNFQUFzRTtJQUN0RSx5Q0FBeUM7SUFDekMsb0RBQW9EO0lBQ3BELElBQUlDLDhCQUE4QkQsTUFBTUUsV0FBVyxDQUFDQyxHQUFHLENBQUMsU0FBVUQsV0FBVztRQUMzRSxPQUFPQSxZQUFZRSxLQUFLLENBQUNDLE1BQU07SUFDakMsR0FBR0MsTUFBTSxDQUFDLFNBQVVDLEdBQUcsRUFBRUMsZ0JBQWdCLEVBQUVDLEtBQUs7UUFDOUMsSUFBSUMsZ0JBQWdCSCxHQUFHLENBQUNFLFFBQVEsRUFBRSxJQUFJO1FBQ3RDLElBQUlFLFlBQVlELGdCQUFnQkY7UUFDaENELElBQUlLLElBQUksQ0FBQ0Q7UUFDVCxPQUFPSjtJQUNULEdBQUcsRUFBRTtJQUVMLDZFQUE2RTtJQUM3RSxJQUFJTSxrQkFBa0JaLDRCQUE0QkssTUFBTSxDQUFDLFNBQVVDLEdBQUcsRUFBRU8sT0FBTztRQUM3RSxJQUFJQSxXQUFXZCxNQUFNZSxZQUFZLEVBQUU7WUFDakMsT0FBT1IsTUFBTTtRQUNmO1FBQ0EsT0FBT0E7SUFDVCxHQUFHO0lBQ0gsT0FBT1AsTUFBTUUsV0FBVyxDQUFDVyxnQkFBZ0I7QUFDM0M7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNELFNBQVNHLHdCQUF3QkMsSUFBSTtJQUNuQyxJQUFJakIsUUFBUWlCLEtBQUtqQixLQUFLLEVBQ3BCa0IsYUFBYUQsS0FBS0MsVUFBVTtJQUM5QixJQUFJQyxnQkFBZ0I7SUFDcEIsSUFBSUMsVUFBVTtJQUNkLElBQUlDLHNCQUFzQjtJQUMxQixNQUFPRixrQkFBa0IsTUFBTztRQUM5QixJQUFJRyxvQkFBb0J0QixNQUFNRSxXQUFXLENBQUNrQixRQUFRO1FBQ2xELElBQUlFLHNCQUFzQkosWUFBWTtZQUNwQ0MsZ0JBQWdCO1lBQ2hCO1FBQ0Y7UUFDQUUsdUJBQXVCQyxrQkFBa0JsQixLQUFLLENBQUNDLE1BQU07UUFDckRlO0lBQ0Y7SUFDQSxPQUFPcEIsTUFBTWUsWUFBWSxHQUFHTTtBQUM5QjtBQUNPLFNBQVNFLGNBQWN2QixLQUFLO0lBQ2pDLElBQUlrQixhQUFhbkIsOEJBQThCQztJQUMvQyxJQUFJLENBQUNrQixZQUFZO1FBQ2YsT0FBTztJQUNUO0lBQ0EsSUFBSU0sT0FBT04sV0FBV2QsS0FBSyxDQUFDWSx3QkFBd0I7UUFDbERoQixPQUFPQTtRQUNQa0IsWUFBWUE7SUFDZCxHQUFHO0lBQ0gsSUFBSU8sU0FBU1AsV0FBV08sTUFBTTtJQUM5QixJQUFJQyxpQkFBaUJELE9BQU9FLGlCQUFpQixDQUFDO1FBQzVDSCxNQUFNQTtRQUNOeEIsT0FBT0E7SUFDVDtJQUNBLElBQUk0QixVQUFVSCxPQUFPSSxVQUFVLENBQUM7UUFDOUJMLE1BQU1BO1FBQ054QixPQUFPQTtJQUNUO0lBQ0EsT0FBTztRQUNMd0IsTUFBTUE7UUFDTkUsZ0JBQWdCQTtRQUNoQkUsU0FBU0E7UUFDVEgsUUFBUUE7SUFDVjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS91dGlscy9nZXRBY3RpdmVJdGVtLmpzPzk5YTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV2UgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhlIGF1dG9jb21wbGV0ZSBzb3VyY2Ugd2hlbiB3ZSBjYWxsIGBvbktleURvd25gXG4vLyBvciBgb25DbGlja2AgYmVjYXVzZSB0aG9zZSBhcmUgbmF0aXZlIGJyb3dzZXIgZXZlbnRzLlxuLy8gSG93ZXZlciwgd2UgY2FuIGdldCB0aGUgc291cmNlIGZyb20gdGhlIHN1Z2dlc3Rpb24gaW5kZXguXG5mdW5jdGlvbiBnZXRDb2xsZWN0aW9uRnJvbUFjdGl2ZUl0ZW1JZChzdGF0ZSkge1xuICAvLyBHaXZlbiAzIHNvdXJjZXMgd2l0aCByZXNwZWN0aXZlbHkgMSwgMiBhbmQgMyBzdWdnZXN0aW9uczogWzEsIDIsIDNdXG4gIC8vIFdlIHdhbnQgdG8gZ2V0IHRoZSBhY2N1bXVsYXRlZCBjb3VudHM6XG4gIC8vIFsxLCAxICsgMiwgMSArIDIgKyAzXSA9IFsxLCAzLCAzICsgM10gPSBbMSwgMywgNl1cbiAgdmFyIGFjY3VtdWxhdGVkQ29sbGVjdGlvbnNDb3VudCA9IHN0YXRlLmNvbGxlY3Rpb25zLm1hcChmdW5jdGlvbiAoY29sbGVjdGlvbnMpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbnMuaXRlbXMubGVuZ3RoO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY29sbGVjdGlvbnNDb3VudCwgaW5kZXgpIHtcbiAgICB2YXIgcHJldmlvdXNWYWx1ZSA9IGFjY1tpbmRleCAtIDFdIHx8IDA7XG4gICAgdmFyIG5leHRWYWx1ZSA9IHByZXZpb3VzVmFsdWUgKyBjb2xsZWN0aW9uc0NvdW50O1xuICAgIGFjYy5wdXNoKG5leHRWYWx1ZSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pO1xuXG4gIC8vIEJhc2VkIG9uIHRoZSBhY2N1bXVsYXRlZCBjb3VudHMsIHdlIGNhbiBpbmZlciB0aGUgaW5kZXggb2YgdGhlIHN1Z2dlc3Rpb24uXG4gIHZhciBjb2xsZWN0aW9uSW5kZXggPSBhY2N1bXVsYXRlZENvbGxlY3Rpb25zQ291bnQucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnJlbnQpIHtcbiAgICBpZiAoY3VycmVudCA8PSBzdGF0ZS5hY3RpdmVJdGVtSWQpIHtcbiAgICAgIHJldHVybiBhY2MgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCAwKTtcbiAgcmV0dXJuIHN0YXRlLmNvbGxlY3Rpb25zW2NvbGxlY3Rpb25JbmRleF07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgaGlnaGxpZ2h0ZWQgaW5kZXggcmVsYXRpdmUgdG8gYSBzdWdnZXN0aW9uIG9iamVjdCAobm90IHRoZSBhYnNvbHV0ZVxuICogaGlnaGxpZ2h0ZWQgaW5kZXgpLlxuICpcbiAqIEV4YW1wbGU6XG4gKiAgW1snYScsICdiJ10sIFsnYycsICdkJywgJ2UnXSwgWydmJ11dXG4gKiAgICAgICAgICAgICAgICAgICAgICDihpFcbiAqICAgICAgICAgKGFic29sdXRlOiAzLCByZWxhdGl2ZTogMSlcbiAqL1xuZnVuY3Rpb24gZ2V0UmVsYXRpdmVBY3RpdmVJdGVtSWQoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgIGNvbGxlY3Rpb24gPSBfcmVmLmNvbGxlY3Rpb247XG4gIHZhciBpc09mZnNldEZvdW5kID0gZmFsc2U7XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIHByZXZpb3VzSXRlbXNPZmZzZXQgPSAwO1xuICB3aGlsZSAoaXNPZmZzZXRGb3VuZCA9PT0gZmFsc2UpIHtcbiAgICB2YXIgY3VycmVudENvbGxlY3Rpb24gPSBzdGF0ZS5jb2xsZWN0aW9uc1tjb3VudGVyXTtcbiAgICBpZiAoY3VycmVudENvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb24pIHtcbiAgICAgIGlzT2Zmc2V0Rm91bmQgPSB0cnVlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHByZXZpb3VzSXRlbXNPZmZzZXQgKz0gY3VycmVudENvbGxlY3Rpb24uaXRlbXMubGVuZ3RoO1xuICAgIGNvdW50ZXIrKztcbiAgfVxuICByZXR1cm4gc3RhdGUuYWN0aXZlSXRlbUlkIC0gcHJldmlvdXNJdGVtc09mZnNldDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVJdGVtKHN0YXRlKSB7XG4gIHZhciBjb2xsZWN0aW9uID0gZ2V0Q29sbGVjdGlvbkZyb21BY3RpdmVJdGVtSWQoc3RhdGUpO1xuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgaXRlbSA9IGNvbGxlY3Rpb24uaXRlbXNbZ2V0UmVsYXRpdmVBY3RpdmVJdGVtSWQoe1xuICAgIHN0YXRlOiBzdGF0ZSxcbiAgICBjb2xsZWN0aW9uOiBjb2xsZWN0aW9uXG4gIH0pXTtcbiAgdmFyIHNvdXJjZSA9IGNvbGxlY3Rpb24uc291cmNlO1xuICB2YXIgaXRlbUlucHV0VmFsdWUgPSBzb3VyY2UuZ2V0SXRlbUlucHV0VmFsdWUoe1xuICAgIGl0ZW06IGl0ZW0sXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pO1xuICB2YXIgaXRlbVVybCA9IHNvdXJjZS5nZXRJdGVtVXJsKHtcbiAgICBpdGVtOiBpdGVtLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBpdGVtOiBpdGVtLFxuICAgIGl0ZW1JbnB1dFZhbHVlOiBpdGVtSW5wdXRWYWx1ZSxcbiAgICBpdGVtVXJsOiBpdGVtVXJsLFxuICAgIHNvdXJjZTogc291cmNlXG4gIH07XG59Il0sIm5hbWVzIjpbImdldENvbGxlY3Rpb25Gcm9tQWN0aXZlSXRlbUlkIiwic3RhdGUiLCJhY2N1bXVsYXRlZENvbGxlY3Rpb25zQ291bnQiLCJjb2xsZWN0aW9ucyIsIm1hcCIsIml0ZW1zIiwibGVuZ3RoIiwicmVkdWNlIiwiYWNjIiwiY29sbGVjdGlvbnNDb3VudCIsImluZGV4IiwicHJldmlvdXNWYWx1ZSIsIm5leHRWYWx1ZSIsInB1c2giLCJjb2xsZWN0aW9uSW5kZXgiLCJjdXJyZW50IiwiYWN0aXZlSXRlbUlkIiwiZ2V0UmVsYXRpdmVBY3RpdmVJdGVtSWQiLCJfcmVmIiwiY29sbGVjdGlvbiIsImlzT2Zmc2V0Rm91bmQiLCJjb3VudGVyIiwicHJldmlvdXNJdGVtc09mZnNldCIsImN1cnJlbnRDb2xsZWN0aW9uIiwiZ2V0QWN0aXZlSXRlbSIsIml0ZW0iLCJzb3VyY2UiLCJpdGVtSW5wdXRWYWx1ZSIsImdldEl0ZW1JbnB1dFZhbHVlIiwiaXRlbVVybCIsImdldEl0ZW1VcmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getActiveItem.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNextActiveItemId.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNextActiveItemId.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNextActiveItemId: () => (/* binding */ getNextActiveItemId)\n/* harmony export */ });\n/**\n * Returns the next active item ID from the current state.\n *\n * We allow circular keyboard navigation from the base index.\n * The base index can either be `null` (nothing is highlighted) or `0`\n * (the first item is highlighted).\n * The base index is allowed to get assigned `null` only if\n * `props.defaultActiveItemId` is `null`. This pattern allows to \"stop\"\n * by the actual query before navigating to other suggestions as seen on\n * Google or Amazon.\n *\n * @param moveAmount The offset to increment (or decrement) the last index\n * @param baseIndex The current index to compute the next index from\n * @param itemCount The number of items\n * @param defaultActiveItemId The default active index to fallback to\n */ function getNextActiveItemId(moveAmount, baseIndex, itemCount, defaultActiveItemId) {\n    if (!itemCount) {\n        return null;\n    }\n    if (moveAmount < 0 && (baseIndex === null || defaultActiveItemId !== null && baseIndex === 0)) {\n        return itemCount + moveAmount;\n    }\n    var numericIndex = (baseIndex === null ? -1 : baseIndex) + moveAmount;\n    if (numericIndex <= -1 || numericIndex >= itemCount) {\n        return defaultActiveItemId === null ? null : 0;\n    }\n    return numericIndex;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvZ2V0TmV4dEFjdGl2ZUl0ZW1JZC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7OztDQWVDLEdBQ00sU0FBU0Esb0JBQW9CQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMsU0FBUyxFQUFFQyxtQkFBbUI7SUFDdkYsSUFBSSxDQUFDRCxXQUFXO1FBQ2QsT0FBTztJQUNUO0lBQ0EsSUFBSUYsYUFBYSxLQUFNQyxDQUFBQSxjQUFjLFFBQVFFLHdCQUF3QixRQUFRRixjQUFjLElBQUk7UUFDN0YsT0FBT0MsWUFBWUY7SUFDckI7SUFDQSxJQUFJSSxlQUFlLENBQUNILGNBQWMsT0FBTyxDQUFDLElBQUlBLFNBQVEsSUFBS0Q7SUFDM0QsSUFBSUksZ0JBQWdCLENBQUMsS0FBS0EsZ0JBQWdCRixXQUFXO1FBQ25ELE9BQU9DLHdCQUF3QixPQUFPLE9BQU87SUFDL0M7SUFDQSxPQUFPQztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS91dGlscy9nZXROZXh0QWN0aXZlSXRlbUlkLmpzPzk1MWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXh0IGFjdGl2ZSBpdGVtIElEIGZyb20gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKlxuICogV2UgYWxsb3cgY2lyY3VsYXIga2V5Ym9hcmQgbmF2aWdhdGlvbiBmcm9tIHRoZSBiYXNlIGluZGV4LlxuICogVGhlIGJhc2UgaW5kZXggY2FuIGVpdGhlciBiZSBgbnVsbGAgKG5vdGhpbmcgaXMgaGlnaGxpZ2h0ZWQpIG9yIGAwYFxuICogKHRoZSBmaXJzdCBpdGVtIGlzIGhpZ2hsaWdodGVkKS5cbiAqIFRoZSBiYXNlIGluZGV4IGlzIGFsbG93ZWQgdG8gZ2V0IGFzc2lnbmVkIGBudWxsYCBvbmx5IGlmXG4gKiBgcHJvcHMuZGVmYXVsdEFjdGl2ZUl0ZW1JZGAgaXMgYG51bGxgLiBUaGlzIHBhdHRlcm4gYWxsb3dzIHRvIFwic3RvcFwiXG4gKiBieSB0aGUgYWN0dWFsIHF1ZXJ5IGJlZm9yZSBuYXZpZ2F0aW5nIHRvIG90aGVyIHN1Z2dlc3Rpb25zIGFzIHNlZW4gb25cbiAqIEdvb2dsZSBvciBBbWF6b24uXG4gKlxuICogQHBhcmFtIG1vdmVBbW91bnQgVGhlIG9mZnNldCB0byBpbmNyZW1lbnQgKG9yIGRlY3JlbWVudCkgdGhlIGxhc3QgaW5kZXhcbiAqIEBwYXJhbSBiYXNlSW5kZXggVGhlIGN1cnJlbnQgaW5kZXggdG8gY29tcHV0ZSB0aGUgbmV4dCBpbmRleCBmcm9tXG4gKiBAcGFyYW0gaXRlbUNvdW50IFRoZSBudW1iZXIgb2YgaXRlbXNcbiAqIEBwYXJhbSBkZWZhdWx0QWN0aXZlSXRlbUlkIFRoZSBkZWZhdWx0IGFjdGl2ZSBpbmRleCB0byBmYWxsYmFjayB0b1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dEFjdGl2ZUl0ZW1JZChtb3ZlQW1vdW50LCBiYXNlSW5kZXgsIGl0ZW1Db3VudCwgZGVmYXVsdEFjdGl2ZUl0ZW1JZCkge1xuICBpZiAoIWl0ZW1Db3VudCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChtb3ZlQW1vdW50IDwgMCAmJiAoYmFzZUluZGV4ID09PSBudWxsIHx8IGRlZmF1bHRBY3RpdmVJdGVtSWQgIT09IG51bGwgJiYgYmFzZUluZGV4ID09PSAwKSkge1xuICAgIHJldHVybiBpdGVtQ291bnQgKyBtb3ZlQW1vdW50O1xuICB9XG4gIHZhciBudW1lcmljSW5kZXggPSAoYmFzZUluZGV4ID09PSBudWxsID8gLTEgOiBiYXNlSW5kZXgpICsgbW92ZUFtb3VudDtcbiAgaWYgKG51bWVyaWNJbmRleCA8PSAtMSB8fCBudW1lcmljSW5kZXggPj0gaXRlbUNvdW50KSB7XG4gICAgcmV0dXJuIGRlZmF1bHRBY3RpdmVJdGVtSWQgPT09IG51bGwgPyBudWxsIDogMDtcbiAgfVxuICByZXR1cm4gbnVtZXJpY0luZGV4O1xufSJdLCJuYW1lcyI6WyJnZXROZXh0QWN0aXZlSXRlbUlkIiwibW92ZUFtb3VudCIsImJhc2VJbmRleCIsIml0ZW1Db3VudCIsImRlZmF1bHRBY3RpdmVJdGVtSWQiLCJudW1lcmljSW5kZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNextActiveItemId.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNormalizedSources.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNormalizedSources.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNormalizedSources: () => (/* binding */ getNormalizedSources)\n/* harmony export */ });\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/invariant.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/decycle.js\");\n/* harmony import */ var _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @algolia/autocomplete-shared */ \"(ssr)/./node_modules/.pnpm/@algolia+autocomplete-shared@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1/node_modules/@algolia/autocomplete-shared/dist/esm/noop.js\");\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (_typeof(input) !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (_typeof(res) !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\n\nfunction getNormalizedSources(getSources, params) {\n    var seenSourceIds = [];\n    return Promise.resolve(getSources(params)).then(function(sources) {\n        (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.invariant)(Array.isArray(sources), function() {\n            return \"The `getSources` function must return an array of sources but returned type \".concat(JSON.stringify(_typeof(sources)), \":\\n\\n\").concat(JSON.stringify((0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_1__.decycle)(sources), null, 2));\n        });\n        return Promise.all(sources// We allow `undefined` and `false` sources to allow users to use\n        // `Boolean(query) && source` (=> `false`).\n        // We need to remove these values at this point.\n        .filter(function(maybeSource) {\n            return Boolean(maybeSource);\n        }).map(function(source) {\n            (0,_algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof source.sourceId === \"string\", \"A source must provide a `sourceId` string.\");\n            if (seenSourceIds.includes(source.sourceId)) {\n                throw new Error(\"[Autocomplete] The `sourceId` \".concat(JSON.stringify(source.sourceId), \" is not unique.\"));\n            }\n            seenSourceIds.push(source.sourceId);\n            var defaultSource = {\n                getItemInputValue: function getItemInputValue(_ref) {\n                    var state = _ref.state;\n                    return state.query;\n                },\n                getItemUrl: function getItemUrl() {\n                    return undefined;\n                },\n                onSelect: function onSelect(_ref2) {\n                    var setIsOpen = _ref2.setIsOpen;\n                    setIsOpen(false);\n                },\n                onActive: _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__.noop,\n                onResolve: _algolia_autocomplete_shared__WEBPACK_IMPORTED_MODULE_2__.noop\n            };\n            Object.keys(defaultSource).forEach(function(key) {\n                defaultSource[key].__default = true;\n            });\n            var normalizedSource = _objectSpread(_objectSpread({}, defaultSource), source);\n            return Promise.resolve(normalizedSource);\n        }));\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/getNormalizedSources.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isOrContainsNode.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isOrContainsNode.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isOrContainsNode: () => (/* binding */ isOrContainsNode)\n/* harmony export */ });\nfunction isOrContainsNode(parent, child) {\n    return parent === child || parent.contains(child);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvaXNPckNvbnRhaW5zTm9kZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sU0FBU0EsaUJBQWlCQyxNQUFNLEVBQUVDLEtBQUs7SUFDNUMsT0FBT0QsV0FBV0MsU0FBU0QsT0FBT0UsUUFBUSxDQUFDRDtBQUM3QyIsInNvdXJjZXMiOlsid2VicGFjazovL3RhaWx3aW5kLW5leHRqcy1zdGFydGVyLWJsb2cvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvaXNPckNvbnRhaW5zTm9kZS5qcz9jNTNhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpc09yQ29udGFpbnNOb2RlKHBhcmVudCwgY2hpbGQpIHtcbiAgcmV0dXJuIHBhcmVudCA9PT0gY2hpbGQgfHwgcGFyZW50LmNvbnRhaW5zKGNoaWxkKTtcbn0iXSwibmFtZXMiOlsiaXNPckNvbnRhaW5zTm9kZSIsInBhcmVudCIsImNoaWxkIiwiY29udGFpbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isOrContainsNode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isSamsung.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isSamsung.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSamsung: () => (/* binding */ isSamsung)\n/* harmony export */ });\nvar regex = /((gt|sm)-|galaxy nexus)|samsung[- ]|samsungbrowser/i;\nfunction isSamsung(userAgent) {\n    return Boolean(userAgent && userAgent.match(regex));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvaXNTYW1zdW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFJQSxRQUFRO0FBQ0wsU0FBU0MsVUFBVUMsU0FBUztJQUNqQyxPQUFPQyxRQUFRRCxhQUFhQSxVQUFVRSxLQUFLLENBQUNKO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGFpbHdpbmQtbmV4dGpzLXN0YXJ0ZXItYmxvZy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AYWxnb2xpYSthdXRvY29tcGxldGUtY29yZUAxLjkuM19AYWxnb2xpYStjbGllbnQtc2VhcmNoQDQuMjIuMV9hbGdvbGlhc2VhcmNoQDQuMjIuMV9zZWFyY2gtaW5zaWdodHNAMi4xMy4wL25vZGVfbW9kdWxlcy9AYWxnb2xpYS9hdXRvY29tcGxldGUtY29yZS9kaXN0L2VzbS91dGlscy9pc1NhbXN1bmcuanM/N2UzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVnZXggPSAvKChndHxzbSktfGdhbGF4eSBuZXh1cyl8c2Ftc3VuZ1stIF18c2Ftc3VuZ2Jyb3dzZXIvaTtcbmV4cG9ydCBmdW5jdGlvbiBpc1NhbXN1bmcodXNlckFnZW50KSB7XG4gIHJldHVybiBCb29sZWFuKHVzZXJBZ2VudCAmJiB1c2VyQWdlbnQubWF0Y2gocmVnZXgpKTtcbn0iXSwibmFtZXMiOlsicmVnZXgiLCJpc1NhbXN1bmciLCJ1c2VyQWdlbnQiLCJCb29sZWFuIiwibWF0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/isSamsung.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/mapToAlgoliaResponse.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/mapToAlgoliaResponse.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mapToAlgoliaResponse: () => (/* binding */ mapToAlgoliaResponse)\n/* harmony export */ });\nfunction mapToAlgoliaResponse(rawResults) {\n    return {\n        results: rawResults,\n        hits: rawResults.map(function(result) {\n            return result.hits;\n        }).filter(Boolean),\n        facetHits: rawResults.map(function(result) {\n            var _facetHits;\n            return (_facetHits = result.facetHits) === null || _facetHits === void 0 ? void 0 : _facetHits.map(function(facetHit) {\n                // Bring support for the highlighting components.\n                return {\n                    label: facetHit.value,\n                    count: facetHit.count,\n                    _highlightResult: {\n                        label: {\n                            value: facetHit.highlighted\n                        }\n                    }\n                };\n            });\n        }).filter(Boolean)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQGFsZ29saWErYXV0b2NvbXBsZXRlLWNvcmVAMS45LjNfQGFsZ29saWErY2xpZW50LXNlYXJjaEA0LjIyLjFfYWxnb2xpYXNlYXJjaEA0LjIyLjFfc2VhcmNoLWluc2lnaHRzQDIuMTMuMC9ub2RlX21vZHVsZXMvQGFsZ29saWEvYXV0b2NvbXBsZXRlLWNvcmUvZGlzdC9lc20vdXRpbHMvbWFwVG9BbGdvbGlhUmVzcG9uc2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLHFCQUFxQkMsVUFBVTtJQUM3QyxPQUFPO1FBQ0xDLFNBQVNEO1FBQ1RFLE1BQU1GLFdBQVdHLEdBQUcsQ0FBQyxTQUFVQyxNQUFNO1lBQ25DLE9BQU9BLE9BQU9GLElBQUk7UUFDcEIsR0FBR0csTUFBTSxDQUFDQztRQUNWQyxXQUFXUCxXQUFXRyxHQUFHLENBQUMsU0FBVUMsTUFBTTtZQUN4QyxJQUFJSTtZQUNKLE9BQU8sQ0FBQ0EsYUFBYUosT0FBT0csU0FBUyxNQUFNLFFBQVFDLGVBQWUsS0FBSyxJQUFJLEtBQUssSUFBSUEsV0FBV0wsR0FBRyxDQUFDLFNBQVVNLFFBQVE7Z0JBQ25ILGlEQUFpRDtnQkFDakQsT0FBTztvQkFDTEMsT0FBT0QsU0FBU0UsS0FBSztvQkFDckJDLE9BQU9ILFNBQVNHLEtBQUs7b0JBQ3JCQyxrQkFBa0I7d0JBQ2hCSCxPQUFPOzRCQUNMQyxPQUFPRixTQUFTSyxXQUFXO3dCQUM3QjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0YsR0FBR1QsTUFBTSxDQUFDQztJQUNaO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWlsd2luZC1uZXh0anMtc3RhcnRlci1ibG9nLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0BhbGdvbGlhK2F1dG9jb21wbGV0ZS1jb3JlQDEuOS4zX0BhbGdvbGlhK2NsaWVudC1zZWFyY2hANC4yMi4xX2FsZ29saWFzZWFyY2hANC4yMi4xX3NlYXJjaC1pbnNpZ2h0c0AyLjEzLjAvbm9kZV9tb2R1bGVzL0BhbGdvbGlhL2F1dG9jb21wbGV0ZS1jb3JlL2Rpc3QvZXNtL3V0aWxzL21hcFRvQWxnb2xpYVJlc3BvbnNlLmpzP2QyMmIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG1hcFRvQWxnb2xpYVJlc3BvbnNlKHJhd1Jlc3VsdHMpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN1bHRzOiByYXdSZXN1bHRzLFxuICAgIGhpdHM6IHJhd1Jlc3VsdHMubWFwKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQuaGl0cztcbiAgICB9KS5maWx0ZXIoQm9vbGVhbiksXG4gICAgZmFjZXRIaXRzOiByYXdSZXN1bHRzLm1hcChmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICB2YXIgX2ZhY2V0SGl0cztcbiAgICAgIHJldHVybiAoX2ZhY2V0SGl0cyA9IHJlc3VsdC5mYWNldEhpdHMpID09PSBudWxsIHx8IF9mYWNldEhpdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mYWNldEhpdHMubWFwKGZ1bmN0aW9uIChmYWNldEhpdCkge1xuICAgICAgICAvLyBCcmluZyBzdXBwb3J0IGZvciB0aGUgaGlnaGxpZ2h0aW5nIGNvbXBvbmVudHMuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGFiZWw6IGZhY2V0SGl0LnZhbHVlLFxuICAgICAgICAgIGNvdW50OiBmYWNldEhpdC5jb3VudCxcbiAgICAgICAgICBfaGlnaGxpZ2h0UmVzdWx0OiB7XG4gICAgICAgICAgICBsYWJlbDoge1xuICAgICAgICAgICAgICB2YWx1ZTogZmFjZXRIaXQuaGlnaGxpZ2h0ZWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9KS5maWx0ZXIoQm9vbGVhbilcbiAgfTtcbn0iXSwibmFtZXMiOlsibWFwVG9BbGdvbGlhUmVzcG9uc2UiLCJyYXdSZXN1bHRzIiwicmVzdWx0cyIsImhpdHMiLCJtYXAiLCJyZXN1bHQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZmFjZXRIaXRzIiwiX2ZhY2V0SGl0cyIsImZhY2V0SGl0IiwibGFiZWwiLCJ2YWx1ZSIsImNvdW50IiwiX2hpZ2hsaWdodFJlc3VsdCIsImhpZ2hsaWdodGVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@algolia+autocomplete-core@1.9.3_@algolia+client-search@4.22.1_algoliasearch@4.22.1_search-insights@2.13.0/node_modules/@algolia/autocomplete-core/dist/esm/utils/mapToAlgoliaResponse.js\n");

/***/ })

};
;