"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fast-equals@2.0.4";
exports.ids = ["vendor-chunks/fast-equals@2.0.4"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/fast-equals@2.0.4/node_modules/fast-equals/dist/fast-equals.esm.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/fast-equals@2.0.4/node_modules/fast-equals/dist/fast-equals.esm.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   circularDeepEqual: () => (/* binding */ circularDeepEqual),\n/* harmony export */   circularShallowEqual: () => (/* binding */ circularShallowEqual),\n/* harmony export */   createCustomEqual: () => (/* binding */ createComparator),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   sameValueZeroEqual: () => (/* binding */ sameValueZeroEqual),\n/* harmony export */   shallowEqual: () => (/* binding */ shallowEqual)\n/* harmony export */ });\nvar HAS_WEAKSET_SUPPORT = typeof WeakSet === \"function\";\nvar keys = Object.keys;\n/**\r\n * are the values passed strictly equal or both NaN\r\n *\r\n * @param a the value to compare against\r\n * @param b the value to test\r\n * @returns are the values equal by the SameValueZero principle\r\n */ function sameValueZeroEqual(a, b) {\n    return a === b || a !== a && b !== b;\n}\n/**\r\n * is the value a plain object\r\n *\r\n * @param value the value to test\r\n * @returns is the value a plain object\r\n */ function isPlainObject(value) {\n    return value.constructor === Object || value.constructor == null;\n}\n/**\r\n * is the value promise-like (meaning it is thenable)\r\n *\r\n * @param value the value to test\r\n * @returns is the value promise-like\r\n */ function isPromiseLike(value) {\n    return !!value && typeof value.then === \"function\";\n}\n/**\r\n * is the value passed a react element\r\n *\r\n * @param value the value to test\r\n * @returns is the value a react element\r\n */ function isReactElement(value) {\n    return !!(value && value.$$typeof);\n}\n/**\r\n * in cases where WeakSet is not supported, creates a new custom\r\n * object that mimics the necessary API aspects for cache purposes\r\n *\r\n * @returns the new cache object\r\n */ function getNewCacheFallback() {\n    var values = [];\n    return {\n        add: function(value) {\n            values.push(value);\n        },\n        has: function(value) {\n            return values.indexOf(value) !== -1;\n        }\n    };\n}\n/**\r\n * get a new cache object to prevent circular references\r\n *\r\n * @returns the new cache object\r\n */ var getNewCache = function(canUseWeakMap) {\n    if (canUseWeakMap) {\n        return function _getNewCache() {\n            return new WeakSet();\n        };\n    }\n    return getNewCacheFallback;\n}(HAS_WEAKSET_SUPPORT);\n/**\r\n * create a custom isEqual handler specific to circular objects\r\n *\r\n * @param [isEqual] the isEqual comparator to use instead of isDeepEqual\r\n * @returns the method to create the `isEqual` function\r\n */ function createCircularEqualCreator(isEqual) {\n    return function createCircularEqual(comparator) {\n        var _comparator = isEqual || comparator;\n        return function circularEqual(a, b, cache) {\n            if (cache === void 0) {\n                cache = getNewCache();\n            }\n            var isCacheableA = !!a && typeof a === \"object\";\n            var isCacheableB = !!b && typeof b === \"object\";\n            if (isCacheableA || isCacheableB) {\n                var hasA = isCacheableA && cache.has(a);\n                var hasB = isCacheableB && cache.has(b);\n                if (hasA || hasB) {\n                    return hasA && hasB;\n                }\n                if (isCacheableA) {\n                    cache.add(a);\n                }\n                if (isCacheableB) {\n                    cache.add(b);\n                }\n            }\n            return _comparator(a, b, cache);\n        };\n    };\n}\n/**\r\n * are the arrays equal in value\r\n *\r\n * @param a the array to test\r\n * @param b the array to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta object to pass through\r\n * @returns are the arrays equal\r\n */ function areArraysEqual(a, b, isEqual, meta) {\n    var index = a.length;\n    if (b.length !== index) {\n        return false;\n    }\n    while(index-- > 0){\n        if (!isEqual(a[index], b[index], meta)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\r\n * are the maps equal in value\r\n *\r\n * @param a the map to test\r\n * @param b the map to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta map to pass through\r\n * @returns are the maps equal\r\n */ function areMapsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n    if (isValueEqual && a.size) {\n        var matchedIndices_1 = {};\n        a.forEach(function(aValue, aKey) {\n            if (isValueEqual) {\n                var hasMatch_1 = false;\n                var matchIndex_1 = 0;\n                b.forEach(function(bValue, bKey) {\n                    if (!hasMatch_1 && !matchedIndices_1[matchIndex_1]) {\n                        hasMatch_1 = isEqual(aKey, bKey, meta) && isEqual(aValue, bValue, meta);\n                        if (hasMatch_1) {\n                            matchedIndices_1[matchIndex_1] = true;\n                        }\n                    }\n                    matchIndex_1++;\n                });\n                isValueEqual = hasMatch_1;\n            }\n        });\n    }\n    return isValueEqual;\n}\nvar OWNER = \"_owner\";\nvar hasOwnProperty = Function.prototype.bind.call(Function.prototype.call, Object.prototype.hasOwnProperty);\n/**\r\n * are the objects equal in value\r\n *\r\n * @param a the object to test\r\n * @param b the object to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta object to pass through\r\n * @returns are the objects equal\r\n */ function areObjectsEqual(a, b, isEqual, meta) {\n    var keysA = keys(a);\n    var index = keysA.length;\n    if (keys(b).length !== index) {\n        return false;\n    }\n    if (index) {\n        var key = void 0;\n        while(index-- > 0){\n            key = keysA[index];\n            if (key === OWNER) {\n                var reactElementA = isReactElement(a);\n                var reactElementB = isReactElement(b);\n                if ((reactElementA || reactElementB) && reactElementA !== reactElementB) {\n                    return false;\n                }\n            }\n            if (!hasOwnProperty(b, key) || !isEqual(a[key], b[key], meta)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n/**\r\n * are the regExps equal in value\r\n *\r\n * @param a the regExp to test\r\n * @param b the regExp to test agains\r\n * @returns are the regExps equal\r\n */ function areRegExpsEqual(a, b) {\n    return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.unicode === b.unicode && a.sticky === b.sticky && a.lastIndex === b.lastIndex;\n}\n/**\r\n * are the sets equal in value\r\n *\r\n * @param a the set to test\r\n * @param b the set to test against\r\n * @param isEqual the comparator to determine equality\r\n * @param meta the meta set to pass through\r\n * @returns are the sets equal\r\n */ function areSetsEqual(a, b, isEqual, meta) {\n    var isValueEqual = a.size === b.size;\n    if (isValueEqual && a.size) {\n        var matchedIndices_2 = {};\n        a.forEach(function(aValue) {\n            if (isValueEqual) {\n                var hasMatch_2 = false;\n                var matchIndex_2 = 0;\n                b.forEach(function(bValue) {\n                    if (!hasMatch_2 && !matchedIndices_2[matchIndex_2]) {\n                        hasMatch_2 = isEqual(aValue, bValue, meta);\n                        if (hasMatch_2) {\n                            matchedIndices_2[matchIndex_2] = true;\n                        }\n                    }\n                    matchIndex_2++;\n                });\n                isValueEqual = hasMatch_2;\n            }\n        });\n    }\n    return isValueEqual;\n}\nvar HAS_MAP_SUPPORT = typeof Map === \"function\";\nvar HAS_SET_SUPPORT = typeof Set === \"function\";\nfunction createComparator(createIsEqual) {\n    var isEqual = /* eslint-disable no-use-before-define */ typeof createIsEqual === \"function\" ? createIsEqual(comparator) : comparator;\n    /* eslint-enable */ /**\r\n     * compare the value of the two objects and return true if they are equivalent in values\r\n     *\r\n     * @param a the value to test against\r\n     * @param b the value to test\r\n     * @param [meta] an optional meta object that is passed through to all equality test calls\r\n     * @returns are a and b equivalent in value\r\n     */ function comparator(a, b, meta) {\n        if (a === b) {\n            return true;\n        }\n        if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n            if (isPlainObject(a) && isPlainObject(b)) {\n                return areObjectsEqual(a, b, isEqual, meta);\n            }\n            var aShape = Array.isArray(a);\n            var bShape = Array.isArray(b);\n            if (aShape || bShape) {\n                return aShape === bShape && areArraysEqual(a, b, isEqual, meta);\n            }\n            aShape = a instanceof Date;\n            bShape = b instanceof Date;\n            if (aShape || bShape) {\n                return aShape === bShape && sameValueZeroEqual(a.getTime(), b.getTime());\n            }\n            aShape = a instanceof RegExp;\n            bShape = b instanceof RegExp;\n            if (aShape || bShape) {\n                return aShape === bShape && areRegExpsEqual(a, b);\n            }\n            if (isPromiseLike(a) || isPromiseLike(b)) {\n                return a === b;\n            }\n            if (HAS_MAP_SUPPORT) {\n                aShape = a instanceof Map;\n                bShape = b instanceof Map;\n                if (aShape || bShape) {\n                    return aShape === bShape && areMapsEqual(a, b, isEqual, meta);\n                }\n            }\n            if (HAS_SET_SUPPORT) {\n                aShape = a instanceof Set;\n                bShape = b instanceof Set;\n                if (aShape || bShape) {\n                    return aShape === bShape && areSetsEqual(a, b, isEqual, meta);\n                }\n            }\n            return areObjectsEqual(a, b, isEqual, meta);\n        }\n        return a !== a && b !== b;\n    }\n    return comparator;\n}\nvar deepEqual = createComparator();\nvar shallowEqual = createComparator(function() {\n    return sameValueZeroEqual;\n});\nvar circularDeepEqual = createComparator(createCircularEqualCreator());\nvar circularShallowEqual = createComparator(createCircularEqualCreator(sameValueZeroEqual));\n //# sourceMappingURL=fast-equals.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/fast-equals@2.0.4/node_modules/fast-equals/dist/fast-equals.esm.js\n");

/***/ })

};
;